{"version":3,"file":"index.cjs.js","sources":["../src/utils/isCheckBoxInput.ts","../src/utils/isDateObject.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/logic/getNodeParentName.ts","../src/logic/isNameInFieldArray.ts","../src/utils/compact.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/constants.ts","../src/utils/omit.ts","../src/useFormContext.tsx","../src/logic/getProxyFormState.ts","../src/utils/isEmptyObject.ts","../src/logic/shouldRenderFormState.ts","../src/utils/convertToArrayPayload.ts","../src/useFormState.ts","../src/useController.ts","../src/logic/getControllerValue.ts","../src/logic/appendErrors.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/focusFieldBy.ts","../src/logic/getFocusFieldName.ts","../src/logic/mapCurrentIds.ts","../src/logic/generateId.ts","../src/logic/mapId.ts","../src/utils/append.ts","../src/utils/fillEmptyArray.ts","../src/utils/insert.ts","../src/utils/move.ts","../src/utils/prepend.ts","../src/utils/remove.ts","../src/utils/swap.ts","../src/utils/update.ts","../src/utils/isPrimitive.ts","../src/utils/deepEqual.ts","../src/utils/getValidationModes.ts","../src/utils/isFileInput.ts","../src/utils/isFunction.ts","../src/utils/isHTMLElement.ts","../src/utils/isMultipleSelect.ts","../src/utils/isRadioInput.ts","../src/utils/isString.ts","../src/utils/isWeb.ts","../src/utils/live.ts","../src/utils/omitKeys.ts","../src/utils/Subject.ts","../src/utils/isBoolean.ts","../src/utils/unset.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValueAs.ts","../src/logic/getRadioValue.ts","../src/logic/getFieldValue.ts","../src/logic/getMultipleSelectValue.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/utils/deepMerge.ts","../src/logic/unsetEmptyArray.ts","../src/utils/isMessage.ts","../src/utils/isRegex.ts","../src/logic/getValidateError.ts","../src/logic/getValueAndMessage.ts","../src/logic/validateField.ts","../src/logic/createFormControl.ts","../src/logic/getResolverOptions.ts","../src/logic/hasValidation.ts","../src/logic/skipValidation.ts","../src/utils/isRadioOrCheckbox.ts","../src/utils/cloneObject.ts","../src/controller.tsx","../src/useFieldArray.ts","../src/useForm.ts","../src/useWatch.ts"],"sourcesContent":["import { FieldElement } from '../types';\r\n\r\nexport default (element: FieldElement): element is HTMLInputElement =>\r\n  element.type === 'checkbox';\r\n","export default (data: unknown) => data instanceof Date;\r\n","export default (value: unknown): value is null | undefined => value == null;\r\n","import isDateObject from './isDateObject';\r\nimport isNullOrUndefined from './isNullOrUndefined';\r\n\r\nexport const isObjectType = (value: unknown) => typeof value === 'object';\r\n\r\nexport default <T extends object>(value: unknown): value is T =>\r\n  !isNullOrUndefined(value) &&\r\n  !Array.isArray(value) &&\r\n  isObjectType(value) &&\r\n  !isDateObject(value);\r\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\r\n","import { InternalFieldName } from '../types';\r\n\r\nimport getNodeParentName from './getNodeParentName';\r\n\r\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\r\n  [...names].some((current) => getNodeParentName(name) === current);\r\n","export default (value: any[]) => value.filter(Boolean);\r\n","export default (val: unknown): val is undefined => val === undefined;\r\n","import compact from './compact';\r\nimport isNullOrUndefined from './isNullOrUndefined';\r\nimport isObject from './isObject';\r\nimport isUndefined from './isUndefined';\r\n\r\nexport default <T extends unknown>(\r\n  obj: T,\r\n  path: string,\r\n  defaultValue?: unknown,\r\n) => {\r\n  if (isObject(obj) && path) {\r\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\r\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\r\n      obj,\r\n    );\r\n\r\n    return isUndefined(result) || result === obj\r\n      ? isUndefined(obj[path as keyof T])\r\n        ? defaultValue\r\n        : obj[path as keyof T]\r\n      : result;\r\n  }\r\n\r\n  return undefined;\r\n};\r\n","import { ValidationMode } from './types';\r\n\r\nexport const EVENTS = {\r\n  BLUR: 'blur',\r\n  CHANGE: 'change',\r\n};\r\n\r\nexport const VALIDATION_MODE: ValidationMode = {\r\n  onBlur: 'onBlur',\r\n  onChange: 'onChange',\r\n  onSubmit: 'onSubmit',\r\n  onTouched: 'onTouched',\r\n  all: 'all',\r\n};\r\n\r\nexport const INPUT_VALIDATION_RULES = {\r\n  max: 'max',\r\n  min: 'min',\r\n  maxLength: 'maxLength',\r\n  minLength: 'minLength',\r\n  maxDate: 'maxDate',\r\n  minDate: 'minDate',\r\n  pattern: 'pattern',\r\n  required: 'required',\r\n  validate: 'validate',\r\n};\r\n","export default <Key extends string, T extends Record<Key, any>>(\r\n  source: T,\r\n  key: Key,\r\n): Omit<T, Key> => {\r\n  const copy = { ...source };\r\n  delete copy[key];\r\n\r\n  return copy;\r\n};\r\n","import * as React from 'react';\r\n\r\nimport omit from './utils/omit';\r\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\r\n\r\nconst FormContext = React.createContext<UseFormReturn | null>(null);\r\n\r\nFormContext.displayName = 'RHFContext';\r\n\r\nexport const useFormContext = <\r\n  TFieldValues extends FieldValues,\r\n>(): UseFormReturn<TFieldValues> =>\r\n  React.useContext(FormContext) as unknown as UseFormReturn<TFieldValues>;\r\n\r\nexport const FormProvider = <TFieldValues extends FieldValues>(\r\n  props: FormProviderProps<TFieldValues>,\r\n) => (\r\n  <FormContext.Provider\r\n    value={omit(props, 'children') as unknown as UseFormReturn}\r\n  >\r\n    {props.children}\r\n  </FormContext.Provider>\r\n);\r\n","import { VALIDATION_MODE } from '../constants';\r\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\r\n\r\nexport default <TFieldValues>(\r\n  formState: FormState<TFieldValues>,\r\n  _proxyFormState: ReadFormState,\r\n  localProxyFormState?: ReadFormState,\r\n  isRoot = true,\r\n) => {\r\n  function createGetter(prop: keyof FormStateProxy) {\r\n    return () => {\r\n      if (prop in formState) {\r\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\r\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\r\n        }\r\n        localProxyFormState && (localProxyFormState[prop] = true);\r\n        return formState[prop];\r\n      }\r\n      return undefined;\r\n    };\r\n  }\r\n\r\n  const result = {} as any as typeof formState;\r\n  for (const key in formState) {\r\n    Object.defineProperty(result, key, {\r\n      get: createGetter(key as keyof FormStateProxy),\r\n    });\r\n  }\r\n\r\n  return result;\r\n};\r\n","import { EmptyObject } from '../types';\r\n\r\nimport isObject from './isObject';\r\n\r\nexport default (value: unknown): value is EmptyObject =>\r\n  isObject(value) && !Object.keys(value).length;\r\n","import { VALIDATION_MODE } from '../constants';\r\nimport { ReadFormState } from '../types';\r\nimport isEmptyObject from '../utils/isEmptyObject';\r\nimport omit from '../utils/omit';\r\n\r\nexport default <T extends Record<string, any>, K extends ReadFormState>(\r\n  formStateData: T,\r\n  _proxyFormState: K,\r\n  isRoot?: boolean,\r\n) => {\r\n  const formState = omit(formStateData, 'name');\r\n\r\n  return (\r\n    isEmptyObject(formState) ||\r\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\r\n    Object.keys(formState).find(\r\n      (key) =>\r\n        _proxyFormState[key as keyof ReadFormState] ===\r\n        (!isRoot || VALIDATION_MODE.all),\r\n    )\r\n  );\r\n};\r\n","export default <T extends unknown>(value: T) =>\r\n  Array.isArray(value) ? value : [value];\r\n","import * as React from 'react';\r\n\r\nimport getProxyFormState from './logic/getProxyFormState';\r\nimport shouldRenderFormState from './logic/shouldRenderFormState';\r\nimport convertToArrayPayload from './utils/convertToArrayPayload';\r\nimport {\r\n  FieldValues,\r\n  FormState,\r\n  InternalFieldName,\r\n  UseFormStateProps,\r\n  UseFormStateReturn,\r\n} from './types';\r\nimport { useFormContext } from './useFormContext';\r\n\r\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\r\n  props?: UseFormStateProps<TFieldValues>,\r\n): UseFormStateReturn<TFieldValues> {\r\n  const methods = useFormContext();\r\n  const { control = methods.control, disabled, name } = props || {};\r\n  const nameRef = React.useRef<InternalFieldName>(name as InternalFieldName);\r\n  const [formState, updateFormState] = React.useState(control._formState.val);\r\n  const _localProxyFormState = React.useRef({\r\n    isDirty: false,\r\n    dirtyFields: false,\r\n    touchedFields: false,\r\n    isValidating: false,\r\n    isValid: false,\r\n    errors: false,\r\n  });\r\n  nameRef.current = name as InternalFieldName;\r\n\r\n  React.useEffect(() => {\r\n    const formStateSubscription = control._subjects.state.subscribe({\r\n      next: (formState) =>\r\n        (!nameRef.current ||\r\n          !formState.name ||\r\n          convertToArrayPayload(nameRef.current).includes(formState.name)) &&\r\n        shouldRenderFormState(formState, _localProxyFormState.current) &&\r\n        updateFormState({\r\n          ...control._formState.val,\r\n          ...formState,\r\n        }),\r\n    });\r\n\r\n    disabled && formStateSubscription.unsubscribe();\r\n\r\n    return () => formStateSubscription.unsubscribe();\r\n  }, [disabled, control]);\r\n\r\n  return getProxyFormState(\r\n    formState as FormState<TFieldValues>,\r\n    control._proxyFormState,\r\n    _localProxyFormState.current,\r\n    false,\r\n  );\r\n}\r\n\r\nexport { useFormState };\r\n","import * as React from 'react';\r\n\r\nimport getControllerValue from './logic/getControllerValue';\r\nimport isNameInFieldArray from './logic/isNameInFieldArray';\r\nimport get from './utils/get';\r\nimport { EVENTS } from './constants';\r\nimport {\r\n  Field,\r\n  FieldPath,\r\n  FieldValues,\r\n  InternalFieldName,\r\n  UseControllerProps,\r\n  UseControllerReturn,\r\n} from './types';\r\nimport { useFormContext } from './useFormContext';\r\nimport { useFormState } from './useFormState';\r\n\r\nexport function useController<\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\r\n>(\r\n  props: UseControllerProps<TFieldValues, TName>,\r\n): UseControllerReturn<TFieldValues, TName> {\r\n  const methods = useFormContext<TFieldValues>();\r\n  const { name, control = methods.control, shouldUnregister } = props;\r\n  const [value, setInputStateValue] = React.useState(\r\n    get(\r\n      control._formValues,\r\n      name,\r\n      get(control._defaultValues, name, props.defaultValue),\r\n    ),\r\n  );\r\n  const formState = useFormState({\r\n    control: control || methods.control,\r\n    name,\r\n  });\r\n\r\n  const registerProps = control.register(name, {\r\n    ...props.rules,\r\n    value,\r\n  });\r\n\r\n  const updateMounted = React.useCallback(\r\n    (name: InternalFieldName, value: boolean) => {\r\n      const field: Field = get(control._fields, name);\r\n\r\n      if (field) {\r\n        field._f.mount = value;\r\n      }\r\n    },\r\n    [control],\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    const controllerSubscription = control._subjects.control.subscribe({\r\n      next: (data) =>\r\n        (!data.name || name === data.name) &&\r\n        setInputStateValue(get(data.values, name)),\r\n    });\r\n    updateMounted(name, true);\r\n\r\n    return () => {\r\n      controllerSubscription.unsubscribe();\r\n      const _shouldUnregisterField =\r\n        control._shouldUnregister || shouldUnregister;\r\n\r\n      if (\r\n        isNameInFieldArray(control._names.array, name)\r\n          ? _shouldUnregisterField && !control._isInAction.val\r\n          : _shouldUnregisterField\r\n      ) {\r\n        control.unregister(name);\r\n      } else {\r\n        updateMounted(name, false);\r\n      }\r\n    };\r\n  }, [name, control, shouldUnregister, updateMounted]);\r\n\r\n  return {\r\n    field: {\r\n      onChange: (event: any) => {\r\n        const value = getControllerValue(event);\r\n        setInputStateValue(value);\r\n\r\n        registerProps.onChange({\r\n          target: {\r\n            value,\r\n            name: name as InternalFieldName,\r\n          },\r\n          type: EVENTS.CHANGE,\r\n        });\r\n      },\r\n      onBlur: () => {\r\n        registerProps.onBlur({\r\n          target: {\r\n            name: name as InternalFieldName,\r\n          },\r\n          type: EVENTS.BLUR,\r\n        });\r\n      },\r\n      name,\r\n      value,\r\n      ref: (elm) =>\r\n        elm &&\r\n        registerProps.ref({\r\n          focus: () => elm.focus && elm.focus(),\r\n          setCustomValidity: (message: string) =>\r\n            elm.setCustomValidity(message),\r\n          reportValidity: () => elm.reportValidity(),\r\n        }),\r\n    },\r\n    formState,\r\n    fieldState: {\r\n      invalid: !!get(formState.errors, name),\r\n      isDirty: !!get(formState.dirtyFields, name),\r\n      isTouched: !!get(formState.touchedFields, name),\r\n      error: get(formState.errors, name),\r\n    },\r\n  };\r\n}\r\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\r\nimport isObject from '../utils/isObject';\r\n\r\ntype Event = { target: any };\r\n\r\nexport default (event: unknown) =>\r\n  isObject(event) && (event as Event).target\r\n    ? isCheckBoxInput((event as Event).target)\r\n      ? (event as Event).target.checked\r\n      : (event as Event).target.value\r\n    : event;\r\n","import {\r\n  InternalFieldErrors,\r\n  InternalFieldName,\r\n  ValidateResult,\r\n} from '../types';\r\n\r\nexport default (\r\n  name: InternalFieldName,\r\n  validateAllFieldCriteria: boolean,\r\n  errors: InternalFieldErrors,\r\n  type: string,\r\n  message: ValidateResult,\r\n) =>\r\n  validateAllFieldCriteria\r\n    ? {\r\n        ...errors[name],\r\n        types: {\r\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\r\n          [type]: message || true,\r\n        },\r\n      }\r\n    : {};\r\n","export default (value: string) => /^\\w*$/.test(value);\r\n","import compact from './compact';\r\n\r\nexport default (input: string): string[] =>\r\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\r\n","import { FieldValues } from '../types';\r\n\r\nimport isKey from './isKey';\r\nimport isObject from './isObject';\r\nimport stringToPath from './stringToPath';\r\n\r\nexport default function set(\r\n  object: FieldValues,\r\n  path: string,\r\n  value?: unknown,\r\n) {\r\n  let index = -1;\r\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n  const length = tempPath.length;\r\n  const lastIndex = length - 1;\r\n\r\n  while (++index < length) {\r\n    const key = tempPath[index];\r\n    let newValue = value;\r\n\r\n    if (index !== lastIndex) {\r\n      const objValue = object[key];\r\n      newValue =\r\n        isObject(objValue) || Array.isArray(objValue)\r\n          ? objValue\r\n          : !isNaN(+tempPath[index + 1])\r\n          ? []\r\n          : {};\r\n    }\r\n    object[key] = newValue;\r\n    object = object[key];\r\n  }\r\n  return object;\r\n}\r\n","import { FieldRefs, InternalFieldName } from '../types';\r\nimport { get } from '../utils';\r\nimport isObject from '../utils/isObject';\r\nimport isUndefined from '../utils/isUndefined';\r\nimport omit from '../utils/omit';\r\n\r\nconst focusFieldBy = (\r\n  fields: FieldRefs,\r\n  callback: (name: string) => boolean,\r\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\r\n) => {\r\n  for (const key of fieldsNames || Object.keys(fields)) {\r\n    const field = get(fields, key);\r\n\r\n    if (field) {\r\n      const _f = field._f;\r\n      const current = omit(field, '_f');\r\n\r\n      if (_f && callback(_f.name)) {\r\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\r\n          break;\r\n        } else if (_f.refs) {\r\n          _f.refs[0].focus();\r\n          break;\r\n        }\r\n      } else if (isObject(current)) {\r\n        focusFieldBy(current, callback);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport default focusFieldBy;\r\n","import { FieldArrayMethodProps, InternalFieldName } from '../types';\r\n\r\nexport default (\r\n  name: InternalFieldName,\r\n  index: number,\r\n  options?: FieldArrayMethodProps,\r\n): string =>\r\n  options && !options.shouldFocus\r\n    ? options.focusName || `${name}.${options.focusIndex}.`\r\n    : `${name}.${index}.`;\r\n","import * as React from 'react';\r\n\r\nimport { FieldValues } from '../types';\r\n\r\nexport default <T, K>(\r\n  values: T[],\r\n  _fieldIds: React.MutableRefObject<K>,\r\n  keyName: string,\r\n) =>\r\n  values.map((value, index) => {\r\n    const output = _fieldIds.current[index as keyof K];\r\n\r\n    return {\r\n      ...value,\r\n      ...(output ? { [keyName]: (output as FieldValues)[keyName] } : {}),\r\n    };\r\n  });\r\n","export default () => {\r\n  const d =\r\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\r\n\r\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n    const r = (Math.random() * 16 + d) % 16 | 0;\r\n\r\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n  });\r\n};\r\n","import { FieldArrayPath, FieldArrayWithId, FieldValues } from '../types';\r\n\r\nimport generateId from './generateId';\r\n\r\nexport default <\r\n  TFieldArrayValues extends FieldValues = FieldValues,\r\n  TFieldName extends FieldArrayPath<TFieldArrayValues> = FieldArrayPath<TFieldArrayValues>,\r\n  TKeyName extends string = 'id',\r\n>(\r\n  values: Partial<TFieldArrayValues>[] = [],\r\n  keyName: TKeyName,\r\n): Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[] =>\r\n  values.map((value: Partial<TFieldArrayValues>) => ({\r\n    ...(value[keyName] ? {} : { [keyName]: generateId() }),\r\n    ...value,\r\n  })) as Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[];\r\n","import convertToArrayPayload from './convertToArrayPayload';\r\n\r\nexport default function append<T>(data: T[], value: T | T[]): T[] {\r\n  return [...convertToArrayPayload(data), ...convertToArrayPayload(value)];\r\n}\r\n","export default <T>(value: T | T[]): undefined[] | undefined =>\r\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\r\n","import convertToArrayPayload from './convertToArrayPayload';\r\n\r\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\r\nexport default function insert<T>(\r\n  data: T[],\r\n  index: number,\r\n  value: T | T[],\r\n): T[];\r\nexport default function insert<T>(\r\n  data: T[],\r\n  index: number,\r\n  value?: T | T[],\r\n): (T | undefined)[] {\r\n  return [\r\n    ...data.slice(0, index),\r\n    ...convertToArrayPayload(value),\r\n    ...data.slice(index),\r\n  ];\r\n}\r\n","import isUndefined from './isUndefined';\r\n\r\nexport default <T>(\r\n  data: (T | undefined)[],\r\n  from: number,\r\n  to: number,\r\n): (T | undefined)[] => {\r\n  if (Array.isArray(data)) {\r\n    if (isUndefined(data[to])) {\r\n      data[to] = undefined;\r\n    }\r\n    data.splice(to, 0, data.splice(from, 1)[0]);\r\n    return data;\r\n  }\r\n\r\n  return [];\r\n};\r\n","import convertToArrayPayload from './convertToArrayPayload';\r\n\r\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\r\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\r\n}\r\n","import compact from './compact';\r\nimport convertToArrayPayload from './convertToArrayPayload';\r\nimport isUndefined from './isUndefined';\r\n\r\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\r\n  let i = 0;\r\n  const temp = [...data];\r\n\r\n  for (const index of indexes) {\r\n    temp.splice(index - i, 1);\r\n    i++;\r\n  }\r\n\r\n  return compact(temp).length ? temp : [];\r\n}\r\n\r\nexport default <T>(data: T[], index?: number | number[]): T[] =>\r\n  isUndefined(index)\r\n    ? []\r\n    : removeAtIndexes(\r\n        data,\r\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\r\n      );\r\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\r\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\r\n};\r\n","export default <T>(fieldValues: T[], index: number, value: any) => {\r\n  fieldValues[index] = value;\r\n  return fieldValues;\r\n};\r\n","import { Primitive } from '../types';\r\n\r\nimport isNullOrUndefined from './isNullOrUndefined';\r\nimport { isObjectType } from './isObject';\r\n\r\nexport default (value: unknown): value is Primitive =>\r\n  isNullOrUndefined(value) || !isObjectType(value);\r\n","import isObject from '../utils/isObject';\r\n\r\nimport isDateObject from './isDateObject';\r\nimport isPrimitive from './isPrimitive';\r\n\r\nexport default function deepEqual(object1: any, object2: any) {\r\n  if (\r\n    isPrimitive(object1) ||\r\n    isPrimitive(object2) ||\r\n    isDateObject(object1) ||\r\n    isDateObject(object2)\r\n  ) {\r\n    return object1 === object2;\r\n  }\r\n\r\n  const keys1 = Object.keys(object1);\r\n  const keys2 = Object.keys(object2);\r\n\r\n  if (keys1.length !== keys2.length) {\r\n    return false;\r\n  }\r\n\r\n  for (const key of keys1) {\r\n    const val1 = object1[key];\r\n\r\n    if (!keys2.includes(key)) {\r\n      return false;\r\n    }\r\n\r\n    if (key !== 'ref') {\r\n      const val2 = object2[key];\r\n\r\n      if (\r\n        (isObject(val1) || Array.isArray(val1)) &&\r\n        (isObject(val2) || Array.isArray(val2))\r\n          ? !deepEqual(val1, val2)\r\n          : val1 !== val2\r\n      ) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n","import { VALIDATION_MODE } from '../constants';\r\nimport { Mode } from '../types';\r\n\r\nexport default (\r\n  mode?: Mode,\r\n): {\r\n  isOnSubmit: boolean;\r\n  isOnBlur: boolean;\r\n  isOnChange: boolean;\r\n  isOnAll: boolean;\r\n  isOnTouch: boolean;\r\n} => ({\r\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n  isOnChange: mode === VALIDATION_MODE.onChange,\r\n  isOnAll: mode === VALIDATION_MODE.all,\r\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\r\n});\r\n","import { FieldElement } from '../types';\r\n\r\nexport default (element: FieldElement): element is HTMLInputElement =>\r\n  element.type === 'file';\r\n","export default (value: unknown): value is Function =>\r\n  typeof value === 'function';\r\n","export default (value: any): value is HTMLElement =>\r\n  value instanceof HTMLElement;\r\n","import { FieldElement } from '../types';\r\n\r\nexport default (element: FieldElement): element is HTMLSelectElement =>\r\n  element.type === `select-multiple`;\r\n","import { FieldElement } from '../types';\r\n\r\nexport default (element: FieldElement): element is HTMLInputElement =>\r\n  element.type === 'radio';\r\n","export default (value: unknown): value is string => typeof value === 'string';\r\n","export default typeof window !== 'undefined' &&\r\n  typeof window.HTMLElement !== 'undefined' &&\r\n  typeof document !== 'undefined';\r\n","import { Ref } from '../types';\r\n\r\nimport isHTMLElement from './isHTMLElement';\r\n\r\nexport default (ref: Ref) => !isHTMLElement(ref) || !document.contains(ref);\r\n","import { FieldArrayWithId } from '../types';\r\n\r\nimport omit from './omit';\r\n\r\nexport default <T extends Partial<FieldArrayWithId>[]>(\r\n  fields: T,\r\n  keyName: string,\r\n) => fields.map((field = {}) => omit(field, keyName));\r\n","export type Observer<T> = {\r\n  next: (value: T) => void;\r\n};\r\n\r\ntype TearDown = () => void;\r\n\r\nexport type SubjectType<T> = {\r\n  next: (value: T) => void;\r\n  subscribe: (value: Observer<T>) => {\r\n    unsubscribe: TearDown;\r\n  };\r\n};\r\n\r\nexport class Subscription {\r\n  private tearDowns: TearDown[] = [];\r\n\r\n  add(tearDown: TearDown) {\r\n    this.tearDowns.push(tearDown);\r\n  }\r\n\r\n  unsubscribe() {\r\n    for (const teardown of this.tearDowns) {\r\n      teardown();\r\n    }\r\n    this.tearDowns = [];\r\n  }\r\n}\r\n\r\nclass Subscriber<T> implements Observer<T> {\r\n  closed = false;\r\n\r\n  constructor(private observer: Observer<T>, subscription: Subscription) {\r\n    subscription.add(() => (this.closed = true));\r\n  }\r\n\r\n  next(value: T) {\r\n    if (!this.closed) {\r\n      this.observer.next(value);\r\n    }\r\n  }\r\n}\r\n\r\nexport default class Subject<T> {\r\n  observers: Observer<T>[];\r\n\r\n  constructor() {\r\n    this.observers = [];\r\n  }\r\n\r\n  next(value: T) {\r\n    for (const observer of this.observers) {\r\n      observer.next(value);\r\n    }\r\n  }\r\n\r\n  subscribe(observer: Observer<T>) {\r\n    const subscription = new Subscription();\r\n    const subscriber = new Subscriber(observer, subscription);\r\n    this.observers.push(subscriber);\r\n\r\n    return subscription;\r\n  }\r\n\r\n  unsubscribe() {\r\n    this.observers = [];\r\n  }\r\n}\r\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\r\n","import isBoolean from './isBoolean';\r\nimport isEmptyObject from './isEmptyObject';\r\nimport isKey from './isKey';\r\nimport isObject from './isObject';\r\nimport isUndefined from './isUndefined';\r\nimport stringToPath from './stringToPath';\r\n\r\nfunction baseGet(object: any, updatePath: (string | number)[]) {\r\n  const length = updatePath.slice(0, -1).length;\r\n  let index = 0;\r\n\r\n  while (index < length) {\r\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\r\n  }\r\n\r\n  return object;\r\n}\r\n\r\nexport default function unset(object: any, path: string) {\r\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\r\n  const childObject =\r\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\r\n  const key = updatePath[updatePath.length - 1];\r\n  let previousObjRef;\r\n\r\n  if (childObject) {\r\n    delete childObject[key];\r\n  }\r\n\r\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\r\n    let index = -1;\r\n    let objectRef;\r\n    const currentPaths = updatePath.slice(0, -(k + 1));\r\n    const currentPathsLength = currentPaths.length - 1;\r\n\r\n    if (k > 0) {\r\n      previousObjRef = object;\r\n    }\r\n\r\n    while (++index < currentPaths.length) {\r\n      const item = currentPaths[index];\r\n      objectRef = objectRef ? objectRef[item] : object[item];\r\n\r\n      if (\r\n        currentPathsLength === index &&\r\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\r\n          (Array.isArray(objectRef) &&\r\n            !objectRef.filter(\r\n              (data) =>\r\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\r\n            ).length))\r\n      ) {\r\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\r\n      }\r\n\r\n      previousObjRef = objectRef;\r\n    }\r\n  }\r\n\r\n  return object;\r\n}\r\n","import isUndefined from '../utils/isUndefined';\r\n\r\ntype CheckboxFieldResult = {\r\n  isValid: boolean;\r\n  value: string | string[] | boolean | undefined;\r\n};\r\n\r\nconst defaultResult: CheckboxFieldResult = {\r\n  value: false,\r\n  isValid: false,\r\n};\r\n\r\nconst validResult = { value: true, isValid: true };\r\n\r\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\r\n  if (Array.isArray(options)) {\r\n    if (options.length > 1) {\r\n      const values = options\r\n        .filter((option) => option && option.checked && !option.disabled)\r\n        .map((option) => option.value);\r\n      return { value: values, isValid: !!values.length };\r\n    }\r\n\r\n    return options[0].checked && !options[0].disabled\r\n      ? // @ts-expect-error expected to work in the browser\r\n        options[0].attributes && !isUndefined(options[0].attributes.value)\r\n        ? isUndefined(options[0].value) || options[0].value === ''\r\n          ? validResult\r\n          : { value: options[0].value, isValid: true }\r\n        : validResult\r\n      : defaultResult;\r\n  }\r\n\r\n  return defaultResult;\r\n};\r\n","import { Field } from '../types';\r\nimport isUndefined from '../utils/isUndefined';\r\n\r\nexport default (\r\n  value: any,\r\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\r\n) =>\r\n  isUndefined(value)\r\n    ? value\r\n    : valueAsNumber\r\n    ? value === ''\r\n      ? NaN\r\n      : +value\r\n    : valueAsDate\r\n    ? new Date(value)\r\n    : setValueAs\r\n    ? setValueAs(value)\r\n    : value;\r\n","type RadioFieldResult = {\r\n  isValid: boolean;\r\n  value: number | string | null;\r\n};\r\n\r\nconst defaultReturn: RadioFieldResult = {\r\n  isValid: false,\r\n  value: null,\r\n};\r\n\r\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\r\n  Array.isArray(options)\r\n    ? options.reduce(\r\n        (previous, option): RadioFieldResult =>\r\n          option && option.checked && !option.disabled\r\n            ? {\r\n                isValid: true,\r\n                value: option.value,\r\n              }\r\n            : previous,\r\n        defaultReturn,\r\n      )\r\n    : defaultReturn;\r\n","import { Field } from '../types';\r\nimport isCheckBox from '../utils/isCheckBoxInput';\r\nimport isFileInput from '../utils/isFileInput';\r\nimport isMultipleSelect from '../utils/isMultipleSelect';\r\nimport isRadioInput from '../utils/isRadioInput';\r\nimport isUndefined from '../utils/isUndefined';\r\n\r\nimport getCheckboxValue from './getCheckboxValue';\r\nimport getFieldValueAs from './getFieldValueAs';\r\nimport getMultipleSelectValue from './getMultipleSelectValue';\r\nimport getRadioValue from './getRadioValue';\r\n\r\nexport default function getFieldValue(field?: Field) {\r\n  if (field && field._f) {\r\n    const ref = field._f.ref;\r\n\r\n    if (\r\n      field._f.refs ? field._f.refs.every((ref) => ref.disabled) : ref.disabled\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if (isFileInput(ref)) {\r\n      return ref.files;\r\n    }\r\n\r\n    if (isRadioInput(ref)) {\r\n      return getRadioValue(field._f.refs).value;\r\n    }\r\n\r\n    if (isMultipleSelect(ref)) {\r\n      return getMultipleSelectValue(ref.options);\r\n    }\r\n\r\n    if (isCheckBox(ref)) {\r\n      return getCheckboxValue(field._f.refs).value;\r\n    }\r\n\r\n    return getFieldValueAs(\r\n      isUndefined(ref.value) ? field._f.ref.value : ref.value,\r\n      field._f,\r\n    );\r\n  }\r\n}\r\n","export default (\r\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\r\n): string[] =>\r\n  [...options]\r\n    .filter(({ selected }): boolean => selected)\r\n    .map(({ value }): string => value);\r\n","import { get } from '../utils';\r\nimport deepEqual from '../utils/deepEqual';\r\nimport { deepMerge } from '../utils/deepMerge';\r\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\r\nimport set from '../utils/set';\r\n\r\nfunction setDirtyFields<\r\n  T extends Record<string, unknown>[],\r\n  U extends Record<string, unknown>[],\r\n  K extends Record<string, boolean | []>,\r\n>(\r\n  values: T,\r\n  defaultValues: U,\r\n  dirtyFields: Record<string, boolean | []>[],\r\n  parentNode?: K,\r\n  parentName?: keyof K,\r\n) {\r\n  let index = -1;\r\n\r\n  while (++index < values.length) {\r\n    for (const key in values[index]) {\r\n      if (Array.isArray(values[index][key])) {\r\n        !dirtyFields[index] && (dirtyFields[index] = {});\r\n        dirtyFields[index][key] = [];\r\n        setDirtyFields(\r\n          values[index][key] as T,\r\n          get(defaultValues[index] || {}, key, []),\r\n          dirtyFields[index][key] as [],\r\n          dirtyFields[index],\r\n          key,\r\n        );\r\n      } else {\r\n        !isNullOrUndefined(defaultValues) &&\r\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\r\n          ? set(dirtyFields[index] || {}, key)\r\n          : (dirtyFields[index] = {\r\n              ...dirtyFields[index],\r\n              [key]: true,\r\n            });\r\n      }\r\n    }\r\n\r\n    parentNode &&\r\n      !dirtyFields.length &&\r\n      delete parentNode[parentName as keyof K];\r\n  }\r\n\r\n  return dirtyFields;\r\n}\r\n\r\nexport default <T extends U, U extends Record<string, unknown>[]>(\r\n  values: T,\r\n  defaultValues: U,\r\n  dirtyFields: Record<string, boolean | []>[],\r\n) =>\r\n  deepMerge(\r\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\r\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\r\n  );\r\n","import isObject from './isObject';\r\nimport isPrimitive from './isPrimitive';\r\n\r\nexport function deepMerge<\r\n  T extends Record<keyof T, any>,\r\n  U extends Record<keyof U, any>,\r\n>(target: T, source: U): T & U {\r\n  if (isPrimitive(target) || isPrimitive(source)) {\r\n    return source;\r\n  }\r\n\r\n  for (const key in source) {\r\n    const targetValue = target[key];\r\n    const sourceValue = source[key];\r\n\r\n    try {\r\n      target[key] =\r\n        (isObject(targetValue) && isObject(sourceValue)) ||\r\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\r\n          ? deepMerge(targetValue, sourceValue)\r\n          : sourceValue;\r\n    } catch {}\r\n  }\r\n\r\n  return target;\r\n}\r\n","import compact from '../utils/compact';\r\nimport get from '../utils/get';\r\nimport unset from '../utils/unset';\r\n\r\nexport default <T>(ref: T, name: string) =>\r\n  !compact(get(ref, name, [])).length && unset(ref, name);\r\n","import * as React from 'react';\r\n\r\nimport { Message } from '../types';\r\nimport isString from '../utils/isString';\r\n\r\nexport default (value: unknown): value is Message =>\r\n  isString(value) || React.isValidElement(value as JSX.Element);\r\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\r\n","import { FieldError, Ref, ValidateResult } from '../types';\r\nimport isBoolean from '../utils/isBoolean';\r\nimport isMessage from '../utils/isMessage';\r\n\r\nexport default function getValidateError(\r\n  result: ValidateResult,\r\n  ref: Ref,\r\n  type = 'validate',\r\n): FieldError | void {\r\n  if (\r\n    isMessage(result) ||\r\n    (Array.isArray(result) && result.every(isMessage)) ||\r\n    (isBoolean(result) && !result)\r\n  ) {\r\n    return {\r\n      type,\r\n      message: isMessage(result) ? result : '',\r\n      ref,\r\n    };\r\n  }\r\n}\r\n","import { ValidationRule } from '../types';\r\nimport isObject from '../utils/isObject';\r\nimport isRegex from '../utils/isRegex';\r\n\r\nexport default (validationData?: ValidationRule) =>\r\n  isObject(validationData) && !isRegex(validationData)\r\n    ? validationData\r\n    : {\r\n        value: validationData,\r\n        message: '',\r\n      };\r\n","import { INPUT_VALIDATION_RULES } from '../constants';\r\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\r\nimport isBoolean from '../utils/isBoolean';\r\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\r\nimport isDateObject from '../utils/isDateObject';\r\nimport isEmptyObject from '../utils/isEmptyObject';\r\nimport isFileInput from '../utils/isFileInput';\r\nimport isFunction from '../utils/isFunction';\r\nimport isMessage from '../utils/isMessage';\r\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\r\nimport isObject from '../utils/isObject';\r\nimport isRadioInput from '../utils/isRadioInput';\r\nimport isRegex from '../utils/isRegex';\r\nimport isString from '../utils/isString';\r\n\r\nimport appendErrors from './appendErrors';\r\nimport getCheckboxValue from './getCheckboxValue';\r\nimport getRadioValue from './getRadioValue';\r\nimport getValidateError from './getValidateError';\r\nimport getValueAndMessage from './getValueAndMessage';\r\n\r\nexport default async (\r\n  field: Field,\r\n  inputValue: any,\r\n  validateAllFieldCriteria: boolean,\r\n  shouldUseNativeValidation?: boolean,\r\n): Promise<InternalFieldErrors> => {\r\n  const {\r\n    ref,\r\n    refs,\r\n    required,\r\n    maxLength,\r\n    minLength,\r\n    maxDate,\r\n    minDate,\r\n    min,\r\n    max,\r\n    pattern,\r\n    validate,\r\n    name,\r\n    valueAsNumber,\r\n    mount,\r\n    disabled,\r\n  } = field._f;\r\n  if (!mount || disabled) {\r\n    return {};\r\n  }\r\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\r\n  const setCustomValidty = (message?: string | boolean) => {\r\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\r\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\r\n      inputRef.reportValidity();\r\n    }\r\n  };\r\n  const error: InternalFieldErrors = {};\r\n  const isRadio = isRadioInput(ref);\r\n  const isCheckBox = isCheckBoxInput(ref);\r\n  const isRadioOrCheckbox = isRadio || isCheckBox;\r\n  const isEmpty =\r\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\r\n    inputValue === '' ||\r\n    (Array.isArray(inputValue) && !inputValue.length);\r\n  const appendErrorsCurry = appendErrors.bind(\r\n    null,\r\n    name,\r\n    validateAllFieldCriteria,\r\n    error,\r\n  );\r\n  const getMinMaxMessage = (\r\n    exceedMax: boolean,\r\n    maxLengthMessage: Message,\r\n    minLengthMessage: Message,\r\n    maxType = INPUT_VALIDATION_RULES.maxLength,\r\n    minType = INPUT_VALIDATION_RULES.minLength,\r\n  ) => {\r\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n    error[name] = {\r\n      type: exceedMax ? maxType : minType,\r\n      message,\r\n      ref,\r\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\r\n    };\r\n  };\r\n\r\n  if (\r\n    required &&\r\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\r\n      (isBoolean(inputValue) && !inputValue) ||\r\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\r\n      (isRadio && !getRadioValue(refs).isValid))\r\n  ) {\r\n    const { value, message } = isMessage(required)\r\n      ? { value: !!required, message: required }\r\n      : getValueAndMessage(required);\r\n\r\n    if (value) {\r\n      error[name] = {\r\n        type: INPUT_VALIDATION_RULES.required,\r\n        message,\r\n        ref: inputRef,\r\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\r\n      };\r\n      if (!validateAllFieldCriteria) {\r\n        setCustomValidty(message);\r\n        return error;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\r\n    let exceedMax;\r\n    let exceedMin;\r\n    const maxOutput = getValueAndMessage(max);\r\n    const minOutput = getValueAndMessage(min);\r\n\r\n    if (!isNaN(inputValue)) {\r\n      const valueNumber =\r\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\r\n      if (!isNullOrUndefined(maxOutput.value)) {\r\n        exceedMax = valueNumber > maxOutput.value;\r\n      }\r\n      if (!isNullOrUndefined(minOutput.value)) {\r\n        exceedMin = valueNumber < minOutput.value;\r\n      }\r\n    } else {\r\n      const valueDate =\r\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\r\n      if (isString(maxOutput.value)) {\r\n        exceedMax = valueDate > new Date(maxOutput.value);\r\n      }\r\n      if (isString(minOutput.value)) {\r\n        exceedMin = valueDate < new Date(minOutput.value);\r\n      }\r\n    }\r\n\r\n    if (exceedMax || exceedMin) {\r\n      getMinMaxMessage(\r\n        !!exceedMax,\r\n        maxOutput.message,\r\n        minOutput.message,\r\n        INPUT_VALIDATION_RULES.max,\r\n        INPUT_VALIDATION_RULES.min,\r\n      );\r\n      if (!validateAllFieldCriteria) {\r\n        setCustomValidty(error[name]!.message);\r\n        return error;\r\n      }\r\n    }\r\n  }\r\n\r\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\r\n    const maxLengthOutput = getValueAndMessage(maxLength);\r\n    const minLengthOutput = getValueAndMessage(minLength);\r\n    const exceedMax =\r\n      !isNullOrUndefined(maxLengthOutput.value) &&\r\n      inputValue.length > maxLengthOutput.value;\r\n    const exceedMin =\r\n      !isNullOrUndefined(minLengthOutput.value) &&\r\n      inputValue.length < minLengthOutput.value;\r\n\r\n    if (exceedMax || exceedMin) {\r\n      getMinMaxMessage(\r\n        exceedMax,\r\n        maxLengthOutput.message,\r\n        minLengthOutput.message,\r\n      );\r\n      if (!validateAllFieldCriteria) {\r\n        setCustomValidty(error[name]!.message);\r\n        return error;\r\n      }\r\n    }\r\n  }\r\n  \r\n  if ((maxDate || minDate) && !isEmpty && isDateObject(inputValue)) {\r\n    const { value: maxDateOutput, message: maxDateMessage } = getValueAndMessage(maxDate);\r\n    const { value: minDateOutput, message: minDateMessage } = getValueAndMessage(minDate);\r\n    const isAboveMaxDate = maxDateOutput && inputValue.getTime() >= (maxDateOutput as any).getTime()\r\n    const isBelowMinDate = minDateOutput && inputValue.getTime() <= (minDateOutput as any).getTime()\r\n    if (isAboveMaxDate) {\r\n        error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.maxDate, message: maxDateMessage,\r\n            ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.maxDate, maxDateMessage));\r\n        if (!validateAllFieldCriteria) {\r\n            setCustomValidty(maxDateMessage);\r\n        }\r\n    }\r\n    if (isBelowMinDate) {\r\n        error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.minDate, message: minDateMessage,\r\n            ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.minDate, minDateMessage));\r\n        if (!validateAllFieldCriteria) {\r\n            setCustomValidty(minDateMessage);\r\n        }\r\n    }\r\n    return error;\r\n  }\r\n\r\n  if (pattern && !isEmpty && isString(inputValue)) {\r\n    const { value: patternValue, message } = getValueAndMessage(pattern);\r\n\r\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\r\n      error[name] = {\r\n        type: INPUT_VALIDATION_RULES.pattern,\r\n        message,\r\n        ref,\r\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\r\n      };\r\n      if (!validateAllFieldCriteria) {\r\n        setCustomValidty(message);\r\n        return error;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (validate) {\r\n    if (isFunction(validate)) {\r\n      const result = await validate(inputValue);\r\n      const validateError = getValidateError(result, inputRef);\r\n\r\n      if (validateError) {\r\n        error[name] = {\r\n          ...validateError,\r\n          ...appendErrorsCurry(\r\n            INPUT_VALIDATION_RULES.validate,\r\n            validateError.message,\r\n          ),\r\n        };\r\n        if (!validateAllFieldCriteria) {\r\n          setCustomValidty(validateError.message);\r\n          return error;\r\n        }\r\n      }\r\n    } else if (isObject(validate)) {\r\n      let validationResult = {} as FieldError;\r\n\r\n      for (const key in validate) {\r\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\r\n          break;\r\n        }\r\n\r\n        const validateError = getValidateError(\r\n          await validate[key](inputValue),\r\n          inputRef,\r\n          key,\r\n        );\r\n\r\n        if (validateError) {\r\n          validationResult = {\r\n            ...validateError,\r\n            ...appendErrorsCurry(key, validateError.message),\r\n          };\r\n\r\n          setCustomValidty(validateError.message);\r\n\r\n          if (validateAllFieldCriteria) {\r\n            error[name] = validationResult;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (!isEmptyObject(validationResult)) {\r\n        error[name] = {\r\n          ref: inputRef,\r\n          ...validationResult,\r\n        };\r\n        if (!validateAllFieldCriteria) {\r\n          return error;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  setCustomValidty(true);\r\n  return error;\r\n};\r\n","import { EVENTS, VALIDATION_MODE } from '../constants';\r\nimport {\r\n  BatchFieldArrayUpdate,\r\n  ChangeHandler,\r\n  DeepPartial,\r\n  DelayCallback,\r\n  Field,\r\n  FieldError,\r\n  FieldNamesMarkedBoolean,\r\n  FieldPath,\r\n  FieldRefs,\r\n  FieldValues,\r\n  FormState,\r\n  GetIsDirty,\r\n  InternalFieldName,\r\n  Names,\r\n  Path,\r\n  PathValue,\r\n  Ref,\r\n  RegisterMissFields,\r\n  RegisterOptions,\r\n  ResolverResult,\r\n  SetFieldValue,\r\n  SetValueConfig,\r\n  Subjects,\r\n  UnpackNestedValue,\r\n  UseFormClearErrors,\r\n  UseFormGetValues,\r\n  UseFormHandleSubmit,\r\n  UseFormProps,\r\n  UseFormRegister,\r\n  UseFormRegisterReturn,\r\n  UseFormReset,\r\n  UseFormReturn,\r\n  UseFormSetError,\r\n  UseFormSetFocus,\r\n  UseFormSetValue,\r\n  UseFormTrigger,\r\n  UseFormUnregister,\r\n  UseFormWatch,\r\n  WatchInternal,\r\n  WatchObserver,\r\n} from '../types';\r\nimport { set } from '../utils';\r\nimport cloneObject from '../utils/cloneObject';\r\nimport compact from '../utils/compact';\r\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\r\nimport deepEqual from '../utils/deepEqual';\r\nimport get from '../utils/get';\r\nimport getValidationModes from '../utils/getValidationModes';\r\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\r\nimport isDateObject from '../utils/isDateObject';\r\nimport isEmptyObject from '../utils/isEmptyObject';\r\nimport isFileInput from '../utils/isFileInput';\r\nimport isFunction from '../utils/isFunction';\r\nimport isHTMLElement from '../utils/isHTMLElement';\r\nimport isMultipleSelect from '../utils/isMultipleSelect';\r\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\r\nimport isObject from '../utils/isObject';\r\nimport isPrimitive from '../utils/isPrimitive';\r\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\r\nimport isString from '../utils/isString';\r\nimport isUndefined from '../utils/isUndefined';\r\nimport isWeb from '../utils/isWeb';\r\nimport live from '../utils/live';\r\nimport omit from '../utils/omit';\r\nimport omitKey from '../utils/omitKeys';\r\nimport omitKeys from '../utils/omitKeys';\r\nimport Subject from '../utils/Subject';\r\nimport unset from '../utils/unset';\r\n\r\nimport focusFieldBy from './focusFieldBy';\r\nimport getFieldValue from './getFieldValue';\r\nimport getFieldValueAs from './getFieldValueAs';\r\nimport getNodeParentName from './getNodeParentName';\r\nimport getResolverOptions from './getResolverOptions';\r\nimport hasValidation from './hasValidation';\r\nimport isNameInFieldArray from './isNameInFieldArray';\r\nimport setFieldArrayDirtyFields from './setFieldArrayDirtyFields';\r\nimport skipValidation from './skipValidation';\r\nimport unsetEmptyArray from './unsetEmptyArray';\r\nimport validateField from './validateField';\r\n\r\nconst defaultOptions = {\r\n  mode: VALIDATION_MODE.all,\r\n  reValidateMode: VALIDATION_MODE.onChange,\r\n  shouldFocusError: true,\r\n  shouldUnregister: true,\r\n} as const;\r\n\r\nconst isWindowUndefined = typeof window === 'undefined';\r\n\r\nexport function createFormControl<\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TContext extends object = object,\r\n>(\r\n  props: UseFormProps<TFieldValues, TContext> = {},\r\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\r\n  let formOptions = {\r\n    ...defaultOptions,\r\n    ...props,\r\n  };\r\n  let _delayCallback: DelayCallback;\r\n  let _formState = {\r\n    isDirty: false,\r\n    isValidating: false,\r\n    dirtyFields: {},\r\n    isSubmitted: false,\r\n    submitCount: 0,\r\n    touchedFields: {},\r\n    isSubmitting: false,\r\n    isSubmitSuccessful: false,\r\n    isValid: false,\r\n    errors: {},\r\n  };\r\n  let _fields = {};\r\n  let _formValues = {};\r\n  let _defaultValues = formOptions.defaultValues || {};\r\n  let _isInAction = false;\r\n  let _isMounted = false;\r\n  let _timer = 0;\r\n  let _names: Names = {\r\n    mount: new Set(),\r\n    unMount: new Set(),\r\n    array: new Set(),\r\n    watch: new Set(),\r\n  } as Names;\r\n  let _validateCount: Record<InternalFieldName, number> = {};\r\n  const _proxyFormState = {\r\n    isDirty: false,\r\n    dirtyFields: false,\r\n    touchedFields: false,\r\n    isValidating: false,\r\n    isValid: false,\r\n    errors: false,\r\n  };\r\n  const _subjects: Subjects<TFieldValues> = {\r\n    watch: new Subject(),\r\n    control: new Subject(),\r\n    array: new Subject(),\r\n    state: new Subject(),\r\n  };\r\n\r\n  const validationMode = getValidationModes(formOptions.mode);\r\n  const isValidateAllFieldCriteria =\r\n    formOptions.criteriaMode === VALIDATION_MODE.all;\r\n\r\n  const debounce =\r\n    <T extends Function>(callback: T, wait: number) =>\r\n    (...args: any) => {\r\n      clearTimeout(_timer);\r\n      _timer = window.setTimeout(() => callback(...args), wait);\r\n    };\r\n\r\n  const isFieldWatched = (name: FieldPath<TFieldValues>) =>\r\n    _names.watchAll ||\r\n    _names.watch.has(name) ||\r\n    _names.watch.has((name.match(/\\w+/) || [])[0]);\r\n\r\n  const updateErrorState = (name: InternalFieldName, error: FieldError) => {\r\n    set(_formState.errors, name, error);\r\n\r\n    _subjects.state.next({\r\n      errors: _formState.errors,\r\n    });\r\n  };\r\n\r\n  const shouldRenderBaseOnValid = async () => {\r\n    const isValid = await validateForm(_fields, true);\r\n    if (isValid !== _formState.isValid) {\r\n      _formState.isValid = isValid;\r\n      _subjects.state.next({\r\n        isValid,\r\n      });\r\n    }\r\n  };\r\n\r\n  const shouldRenderBaseOnError = async (\r\n    shouldSkipRender: boolean,\r\n    name: InternalFieldName,\r\n    error?: FieldError,\r\n    fieldState?: {\r\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\r\n      isDirty?: boolean;\r\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\r\n    },\r\n    isValidFromResolver?: boolean,\r\n    isWatched?: boolean,\r\n  ): Promise<void> => {\r\n    const previousError = get(_formState.errors, name);\r\n    const isValid = !!(\r\n      _proxyFormState.isValid &&\r\n      (formOptions.resolver ? isValidFromResolver : shouldRenderBaseOnValid())\r\n    );\r\n\r\n    if (props.delayError && error) {\r\n      _delayCallback =\r\n        _delayCallback || debounce(updateErrorState, props.delayError);\r\n\r\n      _delayCallback(name, error);\r\n    } else {\r\n      clearTimeout(_timer);\r\n      error\r\n        ? set(_formState.errors, name, error)\r\n        : unset(_formState.errors, name);\r\n    }\r\n\r\n    if (\r\n      (isWatched ||\r\n        (error ? !deepEqual(previousError, error) : previousError) ||\r\n        !isEmptyObject(fieldState) ||\r\n        _formState.isValid !== isValid) &&\r\n      !shouldSkipRender\r\n    ) {\r\n      const updatedFormState = {\r\n        ...fieldState,\r\n        ...(_proxyFormState.isValid && formOptions.resolver ? { isValid } : {}),\r\n        errors: _formState.errors,\r\n        name,\r\n      };\r\n\r\n      _formState = {\r\n        ..._formState,\r\n        ...updatedFormState,\r\n      };\r\n\r\n      _subjects.state.next(isWatched ? { name } : updatedFormState);\r\n    }\r\n\r\n    _validateCount[name]--;\r\n\r\n    if (!_validateCount[name]) {\r\n      _subjects.state.next({\r\n        isValidating: false,\r\n      });\r\n      _validateCount = {};\r\n    }\r\n  };\r\n\r\n  const setFieldValue = (\r\n    name: InternalFieldName,\r\n    value: SetFieldValue<TFieldValues>,\r\n    options: SetValueConfig = {},\r\n    shouldRender?: boolean,\r\n  ) => {\r\n    const field: Field = get(_fields, name);\r\n\r\n    if (field) {\r\n      const _f = field._f;\r\n\r\n      if (_f) {\r\n        set(_formValues, name, getFieldValueAs(value, _f));\r\n\r\n        const fieldValue =\r\n          isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(value)\r\n            ? ''\r\n            : value;\r\n\r\n        if (isFileInput(_f.ref) && !isString(fieldValue)) {\r\n          _f.ref.files = fieldValue as FileList;\r\n        } else if (isMultipleSelect(_f.ref)) {\r\n          [..._f.ref.options].forEach(\r\n            (selectRef) =>\r\n              (selectRef.selected = (\r\n                fieldValue as InternalFieldName[]\r\n              ).includes(selectRef.value)),\r\n          );\r\n        } else if (_f.refs) {\r\n          if (isCheckBoxInput(_f.ref)) {\r\n            _f.refs.length > 1\r\n              ? _f.refs.forEach(\r\n                  (checkboxRef) =>\r\n                    (checkboxRef.checked = Array.isArray(fieldValue)\r\n                      ? !!(fieldValue as []).find(\r\n                          (data: string) => data === checkboxRef.value,\r\n                        )\r\n                      : fieldValue === checkboxRef.value),\r\n                )\r\n              : (_f.refs[0].checked = !!fieldValue);\r\n          } else {\r\n            _f.refs.forEach(\r\n              (radioRef: HTMLInputElement) =>\r\n                (radioRef.checked = radioRef.value === fieldValue),\r\n            );\r\n          }\r\n        } else {\r\n          _f.ref.value = fieldValue;\r\n        }\r\n\r\n        if (shouldRender) {\r\n          _subjects.control.next({\r\n            values: getValues(),\r\n            name,\r\n          });\r\n        }\r\n\r\n        (options.shouldDirty || options.shouldTouch) &&\r\n          updateTouchAndDirtyState(name, fieldValue, options.shouldTouch);\r\n        options.shouldValidate && trigger(name as Path<TFieldValues>);\r\n      }\r\n    }\r\n  };\r\n\r\n  const updateTouchAndDirtyState = (\r\n    name: InternalFieldName,\r\n    inputValue: unknown,\r\n    isCurrentTouched?: boolean,\r\n    shouldRender = true,\r\n  ): Partial<\r\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\r\n  > => {\r\n    const state: Partial<FormState<TFieldValues>> & { name: string } = {\r\n      name,\r\n    };\r\n    let isChanged = false;\r\n\r\n    if (_proxyFormState.isDirty) {\r\n      const previousIsDirty = _formState.isDirty;\r\n      _formState.isDirty = _getIsDirty();\r\n      state.isDirty = _formState.isDirty;\r\n      isChanged = previousIsDirty !== state.isDirty;\r\n    }\r\n\r\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\r\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\r\n      const isCurrentFieldDirty = !deepEqual(\r\n        get(_defaultValues, name),\r\n        inputValue,\r\n      );\r\n      isCurrentFieldDirty\r\n        ? set(_formState.dirtyFields, name, true)\r\n        : unset(_formState.dirtyFields, name);\r\n      state.dirtyFields = _formState.dirtyFields;\r\n      isChanged =\r\n        isChanged || isPreviousFieldDirty !== get(_formState.dirtyFields, name);\r\n    }\r\n\r\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\r\n\r\n    if (isCurrentTouched && !isPreviousFieldTouched) {\r\n      set(_formState.touchedFields, name, isCurrentTouched);\r\n      state.touchedFields = _formState.touchedFields;\r\n      isChanged =\r\n        isChanged ||\r\n        (_proxyFormState.touchedFields &&\r\n          isPreviousFieldTouched !== isCurrentTouched);\r\n    }\r\n\r\n    isChanged && shouldRender && _subjects.state.next(state);\r\n\r\n    return isChanged ? state : {};\r\n  };\r\n\r\n  const executeResolver = async (name?: InternalFieldName[]) => {\r\n    return formOptions.resolver\r\n      ? await formOptions.resolver(\r\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\r\n          formOptions.context,\r\n          getResolverOptions(\r\n            name || _names.mount,\r\n            _fields,\r\n            formOptions.criteriaMode,\r\n            formOptions.shouldUseNativeValidation,\r\n          ),\r\n        )\r\n      : ({} as ResolverResult);\r\n  };\r\n\r\n  const executeResolverValidation = async (names?: InternalFieldName[]) => {\r\n    const { errors } = await executeResolver();\r\n\r\n    if (names) {\r\n      for (const name of names) {\r\n        const error = get(errors, name);\r\n        error\r\n          ? set(_formState.errors, name, error)\r\n          : unset(_formState.errors, name);\r\n      }\r\n    } else {\r\n      _formState.errors = errors;\r\n    }\r\n\r\n    return errors;\r\n  };\r\n\r\n  const validateForm = async (\r\n    _fields: FieldRefs,\r\n    shouldCheckValid?: boolean,\r\n    context = {\r\n      valid: true,\r\n    },\r\n  ) => {\r\n    for (const name in _fields) {\r\n      const field = _fields[name];\r\n\r\n      if (field) {\r\n        const _f = field._f;\r\n        const val = omit(field, '_f');\r\n\r\n        if (_f) {\r\n          const fieldError = await validateField(\r\n            field,\r\n            get(_formValues, _f.name),\r\n            isValidateAllFieldCriteria,\r\n            formOptions.shouldUseNativeValidation,\r\n          );\r\n\r\n          if (shouldCheckValid) {\r\n            if (fieldError[_f.name]) {\r\n              context.valid = false;\r\n              break;\r\n            }\r\n          } else {\r\n            if (fieldError[_f.name]) {\r\n              context.valid = false;\r\n            }\r\n            fieldError[_f.name]\r\n              ? set(_formState.errors, _f.name, fieldError[_f.name])\r\n              : unset(_formState.errors, _f.name);\r\n          }\r\n        }\r\n\r\n        val && (await validateForm(val, shouldCheckValid, context));\r\n      }\r\n    }\r\n\r\n    return context.valid;\r\n  };\r\n\r\n  const handleChange: ChangeHandler = async ({\r\n    type,\r\n    target,\r\n    target: { value, name, type: inputType },\r\n  }) => {\r\n    let error;\r\n    let isValid;\r\n    const field = get(_fields, name) as Field;\r\n\r\n    if (field) {\r\n      let inputValue = inputType ? getFieldValue(field) : undefined;\r\n      inputValue = isUndefined(inputValue) ? value : inputValue;\r\n\r\n      const isBlurEvent = type === EVENTS.BLUR;\r\n      const { isOnBlur: isReValidateOnBlur, isOnChange: isReValidateOnChange } =\r\n        getValidationModes(formOptions.reValidateMode);\r\n\r\n      const shouldSkipValidation =\r\n        (!hasValidation(field._f, field._f.mount) &&\r\n          !formOptions.resolver &&\r\n          !get(_formState.errors, name) &&\r\n          !field._f.deps) ||\r\n        skipValidation({\r\n          isBlurEvent,\r\n          isTouched: !!get(_formState.touchedFields, name),\r\n          isSubmitted: _formState.isSubmitted,\r\n          isReValidateOnBlur,\r\n          isReValidateOnChange,\r\n          ...validationMode,\r\n        });\r\n      const isWatched =\r\n        !isBlurEvent && isFieldWatched(name as FieldPath<TFieldValues>);\r\n\r\n      if (!isUndefined(inputValue)) {\r\n        set(_formValues, name, inputValue);\r\n      }\r\n\r\n      const fieldState = updateTouchAndDirtyState(\r\n        name,\r\n        inputValue,\r\n        isBlurEvent,\r\n        false,\r\n      );\r\n\r\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\r\n\r\n      if (shouldSkipValidation) {\r\n        !isBlurEvent &&\r\n          _subjects.watch.next({\r\n            name,\r\n            type,\r\n          });\r\n        return (\r\n          shouldRender &&\r\n          _subjects.state.next(isWatched ? { name } : { ...fieldState, name })\r\n        );\r\n      }\r\n\r\n      _validateCount[name] = _validateCount[name] ? +1 : 1;\r\n\r\n      _subjects.state.next({\r\n        isValidating: true,\r\n      });\r\n\r\n      if (formOptions.resolver) {\r\n        const { errors } = await executeResolver([name]);\r\n        error = get(errors, name);\r\n\r\n        if (isCheckBoxInput(target as Ref) && !error) {\r\n          const parentNodeName = getNodeParentName(name);\r\n          const valError = get(errors, parentNodeName, {});\r\n          valError.type && valError.message && (error = valError);\r\n\r\n          if (valError || get(_formState.errors, parentNodeName)) {\r\n            name = parentNodeName;\r\n          }\r\n        }\r\n\r\n        isValid = isEmptyObject(errors);\r\n      } else {\r\n        error = (\r\n          await validateField(\r\n            field,\r\n            get(_formValues, name) as Field,\r\n            isValidateAllFieldCriteria,\r\n            formOptions.shouldUseNativeValidation,\r\n          )\r\n        )[name];\r\n      }\r\n\r\n      !isBlurEvent &&\r\n        _subjects.watch.next({\r\n          name,\r\n          type,\r\n          values: getValues(),\r\n        });\r\n\r\n      if (field._f.deps) {\r\n        trigger(field._f.deps as FieldPath<TFieldValues>[]);\r\n      }\r\n\r\n      shouldRenderBaseOnError(\r\n        false,\r\n        name,\r\n        error,\r\n        fieldState,\r\n        isValid,\r\n        isWatched,\r\n      );\r\n    }\r\n  };\r\n\r\n  const _updateValidAndInputValue = (\r\n    name: InternalFieldName,\r\n    ref?: Ref,\r\n    shouldSkipValueAs?: boolean,\r\n  ) => {\r\n    const field = get(_fields, name) as Field;\r\n\r\n    if (field) {\r\n      const fieldValue = get(_formValues, name);\r\n      const isValueUndefined = isUndefined(fieldValue);\r\n      const defaultValue = isValueUndefined\r\n        ? get(_defaultValues, name)\r\n        : fieldValue;\r\n\r\n      if (\r\n        isUndefined(defaultValue) ||\r\n        (ref && (ref as HTMLInputElement).defaultChecked) ||\r\n        shouldSkipValueAs\r\n      ) {\r\n        set(\r\n          _formValues,\r\n          name,\r\n          shouldSkipValueAs ? defaultValue : getFieldValue(field),\r\n        );\r\n      } else {\r\n        setFieldValue(name, defaultValue);\r\n      }\r\n    }\r\n\r\n    _isMounted && _proxyFormState.isValid && _updateValid();\r\n  };\r\n\r\n  const _getIsDirty: GetIsDirty = (name, data) => {\r\n    name && data && set(_formValues, name, data);\r\n\r\n    return !deepEqual({ ...getValues() }, _defaultValues);\r\n  };\r\n\r\n  const _updateValid = async () => {\r\n    const isValid = formOptions.resolver\r\n      ? isEmptyObject((await executeResolver()).errors)\r\n      : await validateForm(_fields, true);\r\n\r\n    if (isValid !== _formState.isValid) {\r\n      _formState.isValid = isValid;\r\n      _subjects.state.next({\r\n        isValid,\r\n      });\r\n    }\r\n  };\r\n\r\n  const setValues = (\r\n    name: FieldPath<TFieldValues>,\r\n    value: UnpackNestedValue<PathValue<TFieldValues, FieldPath<TFieldValues>>>,\r\n    options: SetValueConfig,\r\n  ) =>\r\n    Object.entries(value).forEach(([fieldKey, fieldValue]) => {\r\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\r\n      const field = get(_fields, fieldName);\r\n      const isFieldArray = _names.array.has(name);\r\n\r\n      (isFieldArray || !isPrimitive(fieldValue) || (field && !field._f)) &&\r\n      !isDateObject(fieldValue)\r\n        ? setValues(\r\n            fieldName,\r\n            fieldValue as SetFieldValue<TFieldValues>,\r\n            options,\r\n          )\r\n        : setFieldValue(\r\n            fieldName,\r\n            fieldValue as SetFieldValue<TFieldValues>,\r\n            options,\r\n            true,\r\n          );\r\n    });\r\n\r\n  const _getWatch: WatchInternal<TFieldValues> = (\r\n    fieldNames,\r\n    defaultValue,\r\n    isGlobal,\r\n  ) => {\r\n    const fieldValues = {\r\n      ...(_isMounted\r\n        ? _formValues\r\n        : isUndefined(defaultValue)\r\n        ? _defaultValues\r\n        : isString(fieldNames)\r\n        ? { [fieldNames]: defaultValue }\r\n        : defaultValue),\r\n    };\r\n\r\n    if (!fieldNames) {\r\n      isGlobal && (_names.watchAll = true);\r\n      return fieldValues;\r\n    }\r\n\r\n    const result = [];\r\n\r\n    for (const fieldName of convertToArrayPayload(fieldNames)) {\r\n      isGlobal && _names.watch.add(fieldName as InternalFieldName);\r\n      result.push(get(fieldValues, fieldName as InternalFieldName));\r\n    }\r\n\r\n    return Array.isArray(fieldNames)\r\n      ? result\r\n      : isObject(result[0])\r\n      ? { ...result[0] }\r\n      : Array.isArray(result[0])\r\n      ? [...result[0]]\r\n      : result[0];\r\n  };\r\n\r\n  const _updateValues: RegisterMissFields<TFieldValues> = (\r\n    defaultValues,\r\n    name = '',\r\n  ): void => {\r\n    for (const key in defaultValues) {\r\n      const value = defaultValues[key];\r\n      const fieldName = name + (name ? '.' : '') + key;\r\n      const field = get(_fields, fieldName);\r\n\r\n      if (!field || !field._f) {\r\n        if (isObject(value) || Array.isArray(value)) {\r\n          _updateValues(value, fieldName);\r\n        } else if (!field) {\r\n          set(_formValues, fieldName, value);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const _updateFieldArray: BatchFieldArrayUpdate = (\r\n    keyName,\r\n    name,\r\n    method,\r\n    args,\r\n    updatedFieldArrayValuesWithKey = [],\r\n    shouldSet = true,\r\n    shouldSetFields = true,\r\n  ) => {\r\n    let output;\r\n    const updatedFieldArrayValues = omitKeys(\r\n      updatedFieldArrayValuesWithKey,\r\n      keyName,\r\n    );\r\n    _isInAction = true;\r\n\r\n    if (shouldSetFields && get(_fields, name)) {\r\n      output = method(get(_fields, name), args.argA, args.argB);\r\n      shouldSet && set(_fields, name, output);\r\n    }\r\n\r\n    output = method(get(_formValues, name), args.argA, args.argB);\r\n    shouldSet && set(_formValues, name, output);\r\n\r\n    if (Array.isArray(get(_formState.errors, name))) {\r\n      const output = method(get(_formState.errors, name), args.argA, args.argB);\r\n      shouldSet && set(_formState.errors, name, output);\r\n      unsetEmptyArray(_formState.errors, name);\r\n    }\r\n\r\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\r\n      const output = method(\r\n        get(_formState.touchedFields, name),\r\n        args.argA,\r\n        args.argB,\r\n      );\r\n      shouldSet && set(_formState.touchedFields, name, output);\r\n      unsetEmptyArray(_formState.touchedFields, name);\r\n    }\r\n\r\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\r\n      set(\r\n        _formState.dirtyFields,\r\n        name,\r\n        setFieldArrayDirtyFields(\r\n          omitKey(updatedFieldArrayValues, keyName),\r\n          get(_defaultValues, name, []),\r\n          get(_formState.dirtyFields, name, []),\r\n        ),\r\n      );\r\n      updatedFieldArrayValues &&\r\n        set(\r\n          _formState.dirtyFields,\r\n          name,\r\n          setFieldArrayDirtyFields(\r\n            omitKey(updatedFieldArrayValues, keyName),\r\n            get(_defaultValues, name, []),\r\n            get(_formState.dirtyFields, name, []),\r\n          ),\r\n        );\r\n      unsetEmptyArray(_formState.dirtyFields, name);\r\n    }\r\n\r\n    _subjects.state.next({\r\n      isDirty: _getIsDirty(name, omitKey(updatedFieldArrayValues, keyName)),\r\n      dirtyFields: _formState.dirtyFields,\r\n      errors: _formState.errors,\r\n      isValid: _formState.isValid,\r\n    });\r\n  };\r\n\r\n  const _getFieldArrayValue = (name: InternalFieldName) =>\r\n    get(_isMounted ? _formValues : _defaultValues, name, []);\r\n\r\n  const setValue: UseFormSetValue<TFieldValues> = (\r\n    name,\r\n    value,\r\n    options = {},\r\n  ) => {\r\n    const field = get(_fields, name);\r\n    const isFieldArray = _names.array.has(name);\r\n\r\n    set(_formValues, name, value);\r\n\r\n    if (isFieldArray) {\r\n      _subjects.array.next({\r\n        name,\r\n        values: _formValues,\r\n      });\r\n\r\n      if (\r\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\r\n        options.shouldDirty\r\n      ) {\r\n        set(\r\n          _formState.dirtyFields,\r\n          name,\r\n          setFieldArrayDirtyFields(\r\n            value,\r\n            get(_defaultValues, name, []),\r\n            get(_formState.dirtyFields, name, []),\r\n          ),\r\n        );\r\n\r\n        _subjects.state.next({\r\n          name,\r\n          dirtyFields: _formState.dirtyFields,\r\n          isDirty: _getIsDirty(name, value),\r\n        });\r\n      }\r\n    } else {\r\n      field && !field._f && !isNullOrUndefined(value)\r\n        ? setValues(name, value, options)\r\n        : setFieldValue(name, value, options, true);\r\n    }\r\n\r\n    isFieldWatched(name) && _subjects.state.next({});\r\n    _subjects.watch.next({\r\n      name,\r\n    });\r\n  };\r\n\r\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\r\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\r\n    let isValid;\r\n\r\n    _subjects.state.next({\r\n      isValidating: true,\r\n    });\r\n\r\n    if (formOptions.resolver) {\r\n      const schemaResult = await executeResolverValidation(\r\n        isUndefined(name) ? name : fieldNames,\r\n      );\r\n      isValid = name\r\n        ? fieldNames.every((name) => !get(schemaResult, name))\r\n        : isEmptyObject(schemaResult);\r\n    } else {\r\n      if (name) {\r\n        isValid = (\r\n          await Promise.all(\r\n            fieldNames.map(async (fieldName) => {\r\n              const field = get(_fields, fieldName);\r\n              return await validateForm(\r\n                field._f ? { [fieldName]: field } : field,\r\n              );\r\n            }),\r\n          )\r\n        ).every(Boolean);\r\n      } else {\r\n        await validateForm(_fields);\r\n        isValid = isEmptyObject(_formState.errors);\r\n      }\r\n    }\r\n\r\n    _subjects.state.next({\r\n      ...(isString(name) ? { name } : {}),\r\n      errors: _formState.errors,\r\n      isValidating: false,\r\n    });\r\n\r\n    if (options.shouldFocus && !isValid) {\r\n      focusFieldBy(\r\n        _fields,\r\n        (key) => get(_formState.errors, key),\r\n        name ? fieldNames : _names.mount,\r\n      );\r\n    }\r\n\r\n    _proxyFormState.isValid && _updateValid();\r\n\r\n    return isValid;\r\n  };\r\n\r\n  const getValues: UseFormGetValues<TFieldValues> = (\r\n    fieldNames?:\r\n      | FieldPath<TFieldValues>\r\n      | ReadonlyArray<FieldPath<TFieldValues>>,\r\n  ) => {\r\n    const values = {\r\n      ..._defaultValues,\r\n      ..._formValues,\r\n    };\r\n\r\n    return isUndefined(fieldNames)\r\n      ? values\r\n      : isString(fieldNames)\r\n      ? get(values, fieldNames as InternalFieldName)\r\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\r\n  };\r\n\r\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\r\n    name\r\n      ? convertToArrayPayload(name).forEach((inputName) =>\r\n          unset(_formState.errors, inputName),\r\n        )\r\n      : (_formState.errors = {});\r\n\r\n    _subjects.state.next({\r\n      errors: _formState.errors,\r\n    });\r\n  };\r\n\r\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\r\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\r\n\r\n    set(_formState.errors, name, {\r\n      ...error,\r\n      ref,\r\n    });\r\n\r\n    _subjects.state.next({\r\n      name,\r\n      errors: _formState.errors,\r\n      isValid: false,\r\n    });\r\n\r\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\r\n  };\r\n\r\n  const watch: UseFormWatch<TFieldValues> = (\r\n    fieldName?:\r\n      | FieldPath<TFieldValues>\r\n      | ReadonlyArray<FieldPath<TFieldValues>>\r\n      | WatchObserver<TFieldValues>,\r\n    defaultValue?: unknown,\r\n  ) =>\r\n    isFunction(fieldName)\r\n      ? _subjects.watch.subscribe({\r\n          next: (info: any) =>\r\n            fieldName(\r\n              _getWatch(\r\n                undefined,\r\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\r\n              ) as UnpackNestedValue<TFieldValues>,\r\n              info,\r\n            ),\r\n        })\r\n      : _getWatch(\r\n          fieldName as InternalFieldName | InternalFieldName[],\r\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\r\n          true,\r\n        );\r\n\r\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\r\n    for (const inputName of name ? convertToArrayPayload(name) : _names.mount) {\r\n      _names.mount.delete(inputName);\r\n      _names.array.delete(inputName);\r\n\r\n      if (get(_fields, inputName) as Field) {\r\n        if (!options.keepValue) {\r\n          unset(_fields, inputName);\r\n          unset(_formValues, inputName);\r\n        }\r\n\r\n        !options.keepError && unset(_formState.errors, inputName);\r\n        !options.keepDirty && unset(_formState.dirtyFields, inputName);\r\n        !options.keepTouched && unset(_formState.touchedFields, inputName);\r\n        !formOptions.shouldUnregister &&\r\n          !options.keepDefaultValue &&\r\n          unset(_defaultValues, inputName);\r\n      }\r\n    }\r\n\r\n    _subjects.watch.next({});\r\n\r\n    _subjects.state.next({\r\n      ..._formState,\r\n      ...(!options.keepDirty ? {} : { isDirty: _getIsDirty() }),\r\n    });\r\n    !options.keepIsValid && _updateValid();\r\n  };\r\n\r\n  const registerFieldRef = (\r\n    name: InternalFieldName,\r\n    fieldRef: HTMLInputElement,\r\n    options?: RegisterOptions,\r\n  ): ((name: InternalFieldName) => void) | void => {\r\n    register(name as FieldPath<TFieldValues>, options);\r\n    let field: Field = get(_fields, name);\r\n    const ref = isUndefined(fieldRef.value)\r\n      ? fieldRef.querySelectorAll\r\n        ? (fieldRef.querySelectorAll('input,select,textarea')[0] as Ref) ||\r\n          fieldRef\r\n        : fieldRef\r\n      : fieldRef;\r\n\r\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\r\n\r\n    if (\r\n      ref === field._f.ref ||\r\n      (isRadioOrCheckbox &&\r\n        compact(field._f.refs || []).find((option) => option === ref))\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    field = {\r\n      _f: isRadioOrCheckbox\r\n        ? {\r\n            ...field._f,\r\n            refs: [\r\n              ...compact(field._f.refs || []).filter(\r\n                (ref) => isHTMLElement(ref) && document.contains(ref),\r\n              ),\r\n              ref,\r\n            ],\r\n            ref: { type: ref.type, name },\r\n          }\r\n        : {\r\n            ...field._f,\r\n            ref,\r\n          },\r\n    };\r\n\r\n    set(_fields, name, field);\r\n\r\n    _updateValidAndInputValue(name, ref);\r\n  };\r\n\r\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\r\n    const field = get(_fields, name);\r\n\r\n    set(_fields, name, {\r\n      _f: {\r\n        ...(field && field._f ? field._f : { ref: { name } }),\r\n        name,\r\n        mount: true,\r\n        ...options,\r\n      },\r\n    });\r\n\r\n    if (options.value) {\r\n      set(_formValues, name, options.value);\r\n    }\r\n\r\n    if (\r\n      !isUndefined(options.disabled) &&\r\n      field &&\r\n      field._f &&\r\n      field._f.ref.disabled !== options.disabled\r\n    ) {\r\n      set(_formValues, name, options.disabled ? undefined : field._f.ref.value);\r\n    }\r\n\r\n    _names.mount.add(name);\r\n    !field && _updateValidAndInputValue(name, undefined, true);\r\n\r\n    return isWindowUndefined\r\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\r\n      : {\r\n          name,\r\n          ...(isUndefined(options.disabled)\r\n            ? {}\r\n            : { disabled: options.disabled }),\r\n          onChange: handleChange,\r\n          onBlur: handleChange,\r\n          ref: (ref: HTMLInputElement | null): void => {\r\n            if (ref) {\r\n              registerFieldRef(name, ref, options);\r\n            } else {\r\n              const field = get(_fields, name, {}) as Field;\r\n              const _shouldUnregister =\r\n                formOptions.shouldUnregister || options.shouldUnregister;\r\n\r\n              if (field._f) {\r\n                field._f.mount = false;\r\n              }\r\n\r\n              _shouldUnregister &&\r\n                !(isNameInFieldArray(_names.array, name) && _isInAction) &&\r\n                _names.unMount.add(name);\r\n            }\r\n          },\r\n        };\r\n  };\r\n\r\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\r\n    (onValid, onInvalid) => async (e) => {\r\n      if (e) {\r\n        e.preventDefault && e.preventDefault();\r\n        e.persist && e.persist();\r\n      }\r\n      let hasNoPromiseError = true;\r\n      let fieldValues: any = { ..._formValues };\r\n\r\n      _subjects.state.next({\r\n        isSubmitting: true,\r\n      });\r\n\r\n      try {\r\n        if (formOptions.resolver) {\r\n          const { errors, values } = await executeResolver();\r\n          _formState.errors = errors;\r\n          fieldValues = values;\r\n        } else {\r\n          await validateForm(_fields);\r\n        }\r\n\r\n        if (\r\n          isEmptyObject(_formState.errors) &&\r\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\r\n        ) {\r\n          _subjects.state.next({\r\n            errors: {},\r\n            isSubmitting: true,\r\n          });\r\n          await onValid(fieldValues, e);\r\n        } else {\r\n          onInvalid && (await onInvalid(_formState.errors, e));\r\n          formOptions.shouldFocusError &&\r\n            focusFieldBy(\r\n              _fields,\r\n              (key) => get(_formState.errors, key),\r\n              _names.mount,\r\n            );\r\n        }\r\n      } catch (err) {\r\n        hasNoPromiseError = false;\r\n        throw err;\r\n      } finally {\r\n        _formState.isSubmitted = true;\r\n        _subjects.state.next({\r\n          isSubmitted: true,\r\n          isSubmitting: false,\r\n          isSubmitSuccessful:\r\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\r\n          submitCount: _formState.submitCount + 1,\r\n          errors: _formState.errors,\r\n        });\r\n      }\r\n    };\r\n\r\n  const reset: UseFormReset<TFieldValues> = (\r\n    formValues,\r\n    keepStateOptions = {},\r\n  ) => {\r\n    const updatedValues = formValues || _defaultValues;\r\n    const values = cloneObject(updatedValues);\r\n\r\n    _formValues = values;\r\n\r\n    if (isWeb && !keepStateOptions.keepValues) {\r\n      for (const name of _names.mount) {\r\n        const field = get(_fields, name);\r\n        if (field && field._f) {\r\n          const inputRef = Array.isArray(field._f.refs)\r\n            ? field._f.refs[0]\r\n            : field._f.ref;\r\n\r\n          try {\r\n            isHTMLElement(inputRef) && inputRef.closest('form')!.reset();\r\n            break;\r\n          } catch {}\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!keepStateOptions.keepDefaultValues) {\r\n      _defaultValues = { ...updatedValues };\r\n    }\r\n\r\n    if (!keepStateOptions.keepValues) {\r\n      _fields = {};\r\n\r\n      _subjects.control.next({\r\n        values: keepStateOptions.keepDefaultValues\r\n          ? _defaultValues\r\n          : { ...updatedValues },\r\n      });\r\n\r\n      _subjects.watch.next({});\r\n\r\n      _subjects.array.next({\r\n        values,\r\n      });\r\n    }\r\n\r\n    _names = {\r\n      mount: new Set(),\r\n      unMount: new Set(),\r\n      array: new Set(),\r\n      watch: new Set(),\r\n      watchAll: false,\r\n      focus: '',\r\n    };\r\n\r\n    _subjects.state.next({\r\n      submitCount: keepStateOptions.keepSubmitCount\r\n        ? _formState.submitCount\r\n        : 0,\r\n      isDirty: keepStateOptions.keepDirty\r\n        ? _formState.isDirty\r\n        : keepStateOptions.keepDefaultValues\r\n        ? deepEqual(formValues, _defaultValues)\r\n        : false,\r\n      isSubmitted: keepStateOptions.keepIsSubmitted\r\n        ? _formState.isSubmitted\r\n        : false,\r\n      dirtyFields: keepStateOptions.keepDirty ? _formState.dirtyFields : {},\r\n      touchedFields: keepStateOptions.keepTouched\r\n        ? _formState.touchedFields\r\n        : {},\r\n      errors: keepStateOptions.keepErrors ? _formState.errors : {},\r\n      isSubmitting: false,\r\n      isSubmitSuccessful: false,\r\n    });\r\n\r\n    _isMounted = !!keepStateOptions.keepIsValid;\r\n  };\r\n\r\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) =>\r\n    get(_fields, name)._f.ref.focus();\r\n\r\n  const _removeFields = () => {\r\n    for (const name of _names.unMount) {\r\n      const field = get(_fields, name) as Field;\r\n\r\n      field &&\r\n        (field._f.refs ? field._f.refs.every(live) : live(field._f.ref)) &&\r\n        unregister(name as FieldPath<TFieldValues>);\r\n    }\r\n\r\n    _names.unMount = new Set();\r\n  };\r\n\r\n  return {\r\n    control: {\r\n      register,\r\n      unregister,\r\n      _getWatch,\r\n      _getIsDirty,\r\n      _updateValid,\r\n      _updateValues,\r\n      _removeFields,\r\n      _updateFieldArray,\r\n      _getFieldArrayValue,\r\n      _subjects,\r\n      _shouldUnregister: formOptions.shouldUnregister,\r\n      _fields,\r\n      _proxyFormState,\r\n      get _formValues() {\r\n        return _formValues;\r\n      },\r\n      set _formValues(value) {\r\n        _formValues = value;\r\n      },\r\n      get _isMounted() {\r\n        return _isMounted;\r\n      },\r\n      set _isMounted(value) {\r\n        _isMounted = value;\r\n      },\r\n      get _defaultValues() {\r\n        return _defaultValues;\r\n      },\r\n      set _defaultValues(value) {\r\n        _defaultValues = value;\r\n      },\r\n      get _names() {\r\n        return _names;\r\n      },\r\n      set _names(value) {\r\n        _names = value;\r\n      },\r\n      _isInAction: {\r\n        get val() {\r\n          return _isInAction;\r\n        },\r\n        set val(value) {\r\n          _isInAction = value;\r\n        },\r\n      },\r\n      _formState: {\r\n        get val() {\r\n          return _formState;\r\n        },\r\n        set val(value) {\r\n          _formState = value;\r\n        },\r\n      },\r\n      _updateProps: (options) => {\r\n        formOptions = { ...defaultOptions, ...options };\r\n      },\r\n    },\r\n    trigger,\r\n    register,\r\n    handleSubmit,\r\n    watch,\r\n    setValue,\r\n    getValues,\r\n    reset,\r\n    clearErrors,\r\n    unregister,\r\n    setError,\r\n    setFocus,\r\n  };\r\n}\r\n","import {\r\n  CriteriaMode,\r\n  Field,\r\n  FieldName,\r\n  FieldRefs,\r\n  InternalFieldName,\r\n} from '../types';\r\nimport { get } from '../utils';\r\nimport set from '../utils/set';\r\n\r\nexport default <TFieldValues>(\r\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\r\n  _fieldss: FieldRefs,\r\n  criteriaMode?: CriteriaMode,\r\n  shouldUseNativeValidation?: boolean | undefined,\r\n) => {\r\n  const fields: Record<InternalFieldName, Field['_f']> = {};\r\n\r\n  for (const name of fieldsNames) {\r\n    const field = get(_fieldss, name) as Field;\r\n\r\n    field && set(fields, name, field._f);\r\n  }\r\n\r\n  return {\r\n    criteriaMode,\r\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\r\n    fields,\r\n    shouldUseNativeValidation,\r\n  };\r\n};\r\n","import { RegisterOptions } from '../types';\r\n\r\nexport default <T extends RegisterOptions>(options?: T, mounted?: boolean) =>\r\n  mounted &&\r\n  options &&\r\n  (options.required ||\r\n    options.min ||\r\n    options.max ||\r\n    options.maxLength ||\r\n    options.minLength ||\r\n    options.maxDate ||\r\n    options.minDate ||\r\n    options.pattern ||\r\n    options.validate);\r\n","export default ({\r\n  isOnBlur,\r\n  isOnChange,\r\n  isOnTouch,\r\n  isTouched,\r\n  isReValidateOnBlur,\r\n  isReValidateOnChange,\r\n  isBlurEvent,\r\n  isSubmitted,\r\n  isOnAll,\r\n}: {\r\n  isOnAll?: boolean;\r\n  isOnBlur?: boolean;\r\n  isOnChange?: boolean;\r\n  isReValidateOnBlur?: boolean;\r\n  isReValidateOnChange?: boolean;\r\n  isBlurEvent?: boolean;\r\n  isSubmitted?: boolean;\r\n  isOnTouch?: boolean;\r\n  isTouched?: boolean;\r\n}) => {\r\n  if (isOnAll) {\r\n    return false;\r\n  } else if (!isSubmitted && isOnTouch) {\r\n    return !(isTouched || isBlurEvent);\r\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\r\n    return !isBlurEvent;\r\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\r\n    return isBlurEvent;\r\n  }\r\n  return true;\r\n};\r\n","import { FieldElement } from '../types';\r\n\r\nimport isCheckBoxInput from './isCheckBoxInput';\r\nimport isRadioInput from './isRadioInput';\r\n\r\nexport default (ref: FieldElement): ref is HTMLInputElement =>\r\n  isRadioInput(ref) || isCheckBoxInput(ref);\r\n","import isObject from './isObject';\r\n\r\nexport default function cloneObject<T extends unknown>(data: T): T {\r\n  let copy: any;\r\n  const isArray = Array.isArray(data);\r\n\r\n  if (data instanceof Date) {\r\n    copy = new Date(data.getTime());\r\n  } else if (isArray || isObject(data)) {\r\n    copy = isArray ? [] : {};\r\n    for (const key in data) {\r\n      copy[key] = cloneObject(data[key]);\r\n    }\r\n  } else {\r\n    return data;\r\n  }\r\n\r\n  return copy;\r\n}\r\n","import { ControllerProps, FieldPath, FieldValues } from './types';\r\nimport { useController } from './useController';\r\n\r\nconst Controller = <\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\r\n>(\r\n  props: ControllerProps<TFieldValues, TName>,\r\n) => props.render(useController<TFieldValues, TName>(props));\r\n\r\nexport { Controller };\r\n","import * as React from 'react';\r\n\r\nimport focusFieldBy from './logic/focusFieldBy';\r\nimport getFocusFieldName from './logic/getFocusFieldName';\r\nimport mapCurrentIds from './logic/mapCurrentIds';\r\nimport mapIds from './logic/mapId';\r\nimport appendAt from './utils/append';\r\nimport convertToArrayPayload from './utils/convertToArrayPayload';\r\nimport fillEmptyArray from './utils/fillEmptyArray';\r\nimport get from './utils/get';\r\nimport insertAt from './utils/insert';\r\nimport moveArrayAt from './utils/move';\r\nimport prependAt from './utils/prepend';\r\nimport removeArrayAt from './utils/remove';\r\nimport set from './utils/set';\r\nimport swapArrayAt from './utils/swap';\r\nimport updateAt from './utils/update';\r\nimport {\r\n  FieldArray,\r\n  FieldArrayMethodProps,\r\n  FieldArrayPath,\r\n  FieldArrayWithId,\r\n  FieldPath,\r\n  FieldValues,\r\n  UseFieldArrayProps,\r\n  UseFieldArrayReturn,\r\n} from './types';\r\nimport { useFormContext } from './useFormContext';\r\n\r\nexport const useFieldArray = <\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\r\n  TKeyName extends string = 'id',\r\n>(\r\n  props: UseFieldArrayProps<TFieldValues, TFieldArrayName, TKeyName>,\r\n): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\r\n  const methods = useFormContext();\r\n  const {\r\n    control = methods.control,\r\n    name,\r\n    keyName = 'id' as TKeyName,\r\n    shouldUnregister,\r\n  } = props;\r\n  const [fields, setFields] = React.useState<\r\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\r\n  >(mapIds(control._getFieldArrayValue(name), keyName));\r\n  const _fieldIds = React.useRef(fields);\r\n\r\n  _fieldIds.current = fields;\r\n  control._names.array.add(name);\r\n\r\n  const append = (\r\n    value:\r\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\r\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\r\n    options?: FieldArrayMethodProps,\r\n  ) => {\r\n    const appendValue = convertToArrayPayload(value);\r\n    const updatedFieldArrayValuesWithKey = appendAt(\r\n      mapCurrentIds(control._getFieldArrayValue(name), _fieldIds, keyName),\r\n      mapIds(convertToArrayPayload(value), keyName),\r\n    );\r\n    setFields(updatedFieldArrayValuesWithKey);\r\n    control._updateFieldArray(\r\n      keyName,\r\n      name,\r\n      appendAt,\r\n      {\r\n        argA: fillEmptyArray(value),\r\n      },\r\n      updatedFieldArrayValuesWithKey,\r\n    );\r\n\r\n    control._names.focus = getFocusFieldName(\r\n      name,\r\n      updatedFieldArrayValuesWithKey.length - appendValue.length,\r\n      options,\r\n    );\r\n  };\r\n\r\n  const prepend = (\r\n    value:\r\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\r\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\r\n    options?: FieldArrayMethodProps,\r\n  ) => {\r\n    const updatedFieldArrayValuesWithKey = prependAt(\r\n      mapCurrentIds(control._getFieldArrayValue(name), _fieldIds, keyName),\r\n      mapIds(convertToArrayPayload(value), keyName),\r\n    );\r\n    setFields(updatedFieldArrayValuesWithKey);\r\n    control._updateFieldArray(\r\n      keyName,\r\n      name,\r\n      prependAt,\r\n      {\r\n        argA: fillEmptyArray(value),\r\n      },\r\n      updatedFieldArrayValuesWithKey,\r\n    );\r\n\r\n    control._names.focus = getFocusFieldName(name, 0, options);\r\n  };\r\n\r\n  const remove = (index?: number | number[]) => {\r\n    const updatedFieldArrayValuesWithKey: Partial<\r\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\r\n    >[] = removeArrayAt(\r\n      mapCurrentIds(control._getFieldArrayValue(name), _fieldIds, keyName),\r\n      index,\r\n    );\r\n    setFields(updatedFieldArrayValuesWithKey);\r\n    control._updateFieldArray(\r\n      keyName,\r\n      name,\r\n      removeArrayAt,\r\n      {\r\n        argA: index,\r\n      },\r\n      updatedFieldArrayValuesWithKey,\r\n    );\r\n  };\r\n\r\n  const insert = (\r\n    index: number,\r\n    value:\r\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\r\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\r\n    options?: FieldArrayMethodProps,\r\n  ) => {\r\n    const updatedFieldArrayValuesWithKey = insertAt(\r\n      mapCurrentIds(control._getFieldArrayValue(name), _fieldIds, keyName),\r\n      index,\r\n      mapIds(convertToArrayPayload(value), keyName),\r\n    );\r\n    setFields(updatedFieldArrayValuesWithKey);\r\n    control._updateFieldArray(\r\n      keyName,\r\n      name,\r\n      insertAt,\r\n      {\r\n        argA: index,\r\n        argB: fillEmptyArray(value),\r\n      },\r\n      updatedFieldArrayValuesWithKey,\r\n    );\r\n\r\n    control._names.focus = getFocusFieldName(name, index, options);\r\n  };\r\n\r\n  const swap = (indexA: number, indexB: number) => {\r\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\r\n      control._getFieldArrayValue(name),\r\n      _fieldIds,\r\n      keyName,\r\n    );\r\n    swapArrayAt(updatedFieldArrayValuesWithKey, indexA, indexB);\r\n    setFields(updatedFieldArrayValuesWithKey);\r\n    control._updateFieldArray(\r\n      keyName,\r\n      name,\r\n      swapArrayAt,\r\n      {\r\n        argA: indexA,\r\n        argB: indexB,\r\n      },\r\n      updatedFieldArrayValuesWithKey,\r\n      false,\r\n    );\r\n  };\r\n\r\n  const move = (from: number, to: number) => {\r\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\r\n      control._getFieldArrayValue(name),\r\n      _fieldIds,\r\n      keyName,\r\n    );\r\n    moveArrayAt(updatedFieldArrayValuesWithKey, from, to);\r\n    setFields(updatedFieldArrayValuesWithKey);\r\n    control._updateFieldArray(\r\n      keyName,\r\n      name,\r\n      moveArrayAt,\r\n      {\r\n        argA: from,\r\n        argB: to,\r\n      },\r\n      updatedFieldArrayValuesWithKey,\r\n      false,\r\n    );\r\n  };\r\n\r\n  const update = (\r\n    index: number,\r\n    value: Partial<FieldArray<TFieldValues, TFieldArrayName>>,\r\n  ) => {\r\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\r\n      control._getFieldArrayValue(name),\r\n      _fieldIds,\r\n      keyName,\r\n    );\r\n    const updatedFieldArrayValues = updateAt(\r\n      updatedFieldArrayValuesWithKey,\r\n      index,\r\n      value,\r\n    );\r\n    _fieldIds.current = mapIds(updatedFieldArrayValues, keyName);\r\n    setFields(_fieldIds.current);\r\n    control._updateFieldArray(\r\n      keyName,\r\n      name,\r\n      updateAt,\r\n      {\r\n        argA: index,\r\n        argB: value,\r\n      },\r\n      updatedFieldArrayValuesWithKey,\r\n      true,\r\n      false,\r\n    );\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    control._isInAction.val = false;\r\n\r\n    if (control._names.watchAll) {\r\n      control._subjects.state.next({});\r\n    } else {\r\n      for (const watchField of control._names.watch) {\r\n        if (name.startsWith(watchField)) {\r\n          control._subjects.state.next({});\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    control._subjects.watch.next({\r\n      name,\r\n      values: control._formValues,\r\n    });\r\n\r\n    control._names.focus &&\r\n      focusFieldBy(control._fields, (key: string) =>\r\n        key.startsWith(control._names.focus),\r\n      );\r\n\r\n    control._names.focus = '';\r\n\r\n    control._proxyFormState.isValid && control._updateValid();\r\n  }, [fields, name, control, keyName]);\r\n\r\n  React.useEffect(() => {\r\n    const fieldArraySubscription = control._subjects.array.subscribe({\r\n      next({ values, name: fieldArrayName }) {\r\n        if (fieldArrayName === name || !fieldArrayName) {\r\n          setFields(mapIds(get(values, name), keyName));\r\n        }\r\n      },\r\n    });\r\n\r\n    !get(control._formValues, name) && set(control._formValues, name, []);\r\n\r\n    return () => {\r\n      fieldArraySubscription.unsubscribe();\r\n      if (control._shouldUnregister || shouldUnregister) {\r\n        control.unregister(name as FieldPath<TFieldValues>);\r\n      }\r\n    };\r\n  }, [name, control, keyName, shouldUnregister]);\r\n\r\n  return {\r\n    swap: React.useCallback(swap, [name, control, keyName]),\r\n    move: React.useCallback(move, [name, control, keyName]),\r\n    prepend: React.useCallback(prepend, [name, control, keyName]),\r\n    append: React.useCallback(append, [name, control, keyName]),\r\n    remove: React.useCallback(remove, [name, control, keyName]),\r\n    insert: React.useCallback(insert, [name, control, keyName]),\r\n    update: React.useCallback(update, [name, control, keyName]),\r\n    fields: fields as FieldArrayWithId<\r\n      TFieldValues,\r\n      TFieldArrayName,\r\n      TKeyName\r\n    >[],\r\n  };\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { createFormControl } from './logic/createFormControl';\r\nimport getProxyFormState from './logic/getProxyFormState';\r\nimport shouldRenderFormState from './logic/shouldRenderFormState';\r\nimport { FieldValues, FormState, UseFormProps, UseFormReturn } from './types';\r\n\r\nexport function useForm<\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TContext extends object = object,\r\n>(\r\n  props: UseFormProps<TFieldValues, TContext> = {},\r\n): UseFormReturn<TFieldValues, TContext> {\r\n  const _formControl = React.useRef<\r\n    UseFormReturn<TFieldValues, TContext> | undefined\r\n  >();\r\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\r\n    isDirty: false,\r\n    isValidating: false,\r\n    dirtyFields: {},\r\n    isSubmitted: false,\r\n    submitCount: 0,\r\n    touchedFields: {},\r\n    isSubmitting: false,\r\n    isSubmitSuccessful: false,\r\n    isValid: false,\r\n    errors: {},\r\n  });\r\n\r\n  if (_formControl.current) {\r\n    _formControl.current.control._updateProps(props);\r\n  } else {\r\n    _formControl.current = {\r\n      ...createFormControl(props),\r\n      formState,\r\n    };\r\n  }\r\n\r\n  const control = _formControl.current.control;\r\n\r\n  React.useEffect(() => {\r\n    const formStateSubscription = control._subjects.state.subscribe({\r\n      next(formState) {\r\n        if (shouldRenderFormState(formState, control._proxyFormState, true)) {\r\n          control._formState.val = {\r\n            ...control._formState.val,\r\n            ...formState,\r\n          };\r\n\r\n          updateFormState({ ...control._formState.val });\r\n        }\r\n      },\r\n    });\r\n\r\n    return () => {\r\n      formStateSubscription.unsubscribe();\r\n    };\r\n  }, [control]);\r\n\r\n  React.useEffect(() => {\r\n    if (!control._isMounted) {\r\n      control._isMounted = true;\r\n      control._proxyFormState.isValid && control._updateValid();\r\n      !props.shouldUnregister && control._updateValues(control._defaultValues);\r\n    }\r\n    control._removeFields();\r\n  });\r\n\r\n  _formControl.current.formState = getProxyFormState(\r\n    formState,\r\n    control._proxyFormState,\r\n  );\r\n\r\n  return _formControl.current;\r\n}\r\n","import * as React from 'react';\r\n\r\nimport convertToArrayPayload from './utils/convertToArrayPayload';\r\nimport isUndefined from './utils/isUndefined';\r\nimport {\r\n  Control,\r\n  DeepPartial,\r\n  FieldPath,\r\n  FieldPathValue,\r\n  FieldPathValues,\r\n  FieldValues,\r\n  InternalFieldName,\r\n  UnpackNestedValue,\r\n  UseWatchProps,\r\n} from './types';\r\nimport { useFormContext } from './useFormContext';\r\n\r\nexport function useWatch<\r\n  TFieldValues extends FieldValues = FieldValues,\r\n>(props: {\r\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\r\n  control?: Control<TFieldValues>;\r\n  disabled?: boolean;\r\n}): UnpackNestedValue<DeepPartial<TFieldValues>>;\r\nexport function useWatch<\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\r\n>(props: {\r\n  name: TFieldName;\r\n  defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\r\n  control?: Control<TFieldValues>;\r\n  disabled?: boolean;\r\n}): FieldPathValue<TFieldValues, TFieldName>;\r\nexport function useWatch<\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TFieldNames extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\r\n>(props: {\r\n  name: readonly [...TFieldNames];\r\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\r\n  control?: Control<TFieldValues>;\r\n  disabled?: boolean;\r\n}): FieldPathValues<TFieldValues, TFieldNames>;\r\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\r\n  const methods = useFormContext();\r\n  const {\r\n    control = methods.control,\r\n    name,\r\n    defaultValue,\r\n    disabled,\r\n  } = props || {};\r\n  const _name = React.useRef(name);\r\n  _name.current = name;\r\n\r\n  const [value, updateValue] = React.useState<unknown>(\r\n    isUndefined(defaultValue)\r\n      ? control._getWatch(name as InternalFieldName)\r\n      : defaultValue,\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    const watchSubscription = control._subjects.watch.subscribe({\r\n      next: ({ name }) => {\r\n        (!_name.current ||\r\n          !name ||\r\n          convertToArrayPayload(_name.current).some(\r\n            (fieldName) =>\r\n              name &&\r\n              fieldName &&\r\n              (fieldName.startsWith(name as InternalFieldName) ||\r\n                name.startsWith(fieldName as InternalFieldName)),\r\n          )) &&\r\n          updateValue(\r\n            control._getWatch(\r\n              _name.current as InternalFieldName,\r\n              defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\r\n            ),\r\n          );\r\n      },\r\n    });\r\n\r\n    disabled && watchSubscription.unsubscribe();\r\n\r\n    return () => watchSubscription.unsubscribe();\r\n  }, [disabled, control, defaultValue]);\r\n\r\n  React.useEffect(() => {\r\n    control._removeFields();\r\n  });\r\n\r\n  return value;\r\n}\r\n"],"names":["element","type","data","Date","value","isObjectType","isNullOrUndefined","Array","isArray","isDateObject","name","substring","search","names","some","current","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","isObject","result","compact","split","reduce","key","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","FormContext","React","createContext","displayName","useFormContext","useContext","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","Object","defineProperty","get","keys","length","formStateData","omit","isEmptyObject","find","useFormState","props","methods","control","disabled","nameRef","useRef","updateFormState","useState","_formState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","useEffect","formStateSubscription","_subjects","state","subscribe","next","convertToArrayPayload","includes","shouldRenderFormState","unsubscribe","getProxyFormState","useController","shouldUnregister","setInputStateValue","_formValues","_defaultValues","registerProps","register","rules","updateMounted","useCallback","field","_fields","_f","mount","controllerSubscription","values","_shouldUnregisterField","_shouldUnregister","isNameInFieldArray","_names","array","_isInAction","unregister","onChange","event","target","isCheckBoxInput","checked","getControllerValue","onBlur","ref","elm","focus","setCustomValidity","message","reportValidity","fieldState","invalid","isTouched","error","validateAllFieldCriteria","types","[object Object]","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","callback","fieldsNames","refs","options","shouldFocus","focusName","focusIndex","_fieldIds","keyName","map","output","d","performance","now","c","r","Math","random","toString","generateId","append","insert","slice","from","to","splice","prepend","indexes","i","temp","removeAtIndexes","sort","a","b","indexA","indexB","fieldValues","deepEqual","object1","object2","isPrimitive","keys1","keys2","val1","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","window","document","isHTMLElement","contains","Subscription","this","tearDown","tearDowns","push","teardown","Subscriber","observer","subscription","add","closed","Subject","observers","subscriber","unset","updatePath","childObject","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","defaultResult","validResult","option","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","getFieldValueAs","setDirtyFields","defaultValues","parentNode","parentName","deepMerge","targetValue","sourceValue","isString","isValidElement","RegExp","getValidateError","isMessage","validationData","isRegex","async","inputValue","shouldUseNativeValidation","required","maxLength","minLength","maxDate","minDate","min","max","pattern","validate","inputRef","setCustomValidty","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","exceedMin","maxOutput","minOutput","valueDate","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","maxDateOutput","maxDateMessage","minDateOutput","minDateMessage","isAboveMaxDate","getTime","isBelowMinDate","assign","patternValue","match","isFunction","validateError","validationResult","defaultOptions","reValidateMode","shouldFocusError","isWindowUndefined","createFormControl","_delayCallback","formOptions","isSubmitted","submitCount","isSubmitting","isSubmitSuccessful","_isMounted","_timer","Set","unMount","watch","_validateCount","validationMode","getValidationModes","isValidateAllFieldCriteria","criteriaMode","isFieldWatched","watchAll","has","updateErrorState","shouldRenderBaseOnError","shouldSkipRender","isValidFromResolver","isWatched","previousError","resolver","validateForm","shouldRenderBaseOnValid","wait","delayError","args","clearTimeout","setTimeout","updatedFormState","setFieldValue","shouldRender","fieldValue","isWeb","forEach","selectRef","checkboxRef","radioRef","getValues","shouldDirty","shouldTouch","updateTouchAndDirtyState","shouldValidate","trigger","isCurrentTouched","isChanged","previousIsDirty","_getIsDirty","isPreviousFieldDirty","isPreviousFieldTouched","executeResolver","context","_fieldss","getResolverOptions","shouldCheckValid","valid","fieldError","validateField","handleChange","inputType","isBlurEvent","isReValidateOnBlur","isReValidateOnChange","shouldSkipValidation","deps","skipValidation","parentNodeName","valError","_updateValidAndInputValue","shouldSkipValueAs","defaultChecked","_updateValid","setValues","entries","fieldKey","fieldName","_getWatch","fieldNames","isGlobal","_updateValues","schemaResult","executeResolverValidation","Promise","all","inputName","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","registerFieldRef","fieldRef","querySelectorAll","isRadioOrCheckboxFunction","_removeFields","live","_updateFieldArray","method","updatedFieldArrayValuesWithKey","shouldSet","shouldSetFields","updatedFieldArrayValues","omitKeys","argA","argB","unsetEmptyArray","setFieldArrayDirtyFields","omitKey","_getFieldArrayValue","_updateProps","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","info","setValue","isFieldArray","reset","formValues","keepStateOptions","updatedValues","cloneObject","keepValues","closest","keepDefaultValues","keepSubmitCount","keepIsSubmitted","keepErrors","clearErrors","setError","setFocus","render","Provider","children","setFields","mapIds","watchField","startsWith","fieldArraySubscription","fieldArrayName","swap","mapCurrentIds","swapArrayAt","move","moveArrayAt","prependAt","fillEmptyArray","getFocusFieldName","appendValue","appendAt","remove","removeArrayAt","insertAt","update","updateAt","_formControl","_name","updateValue","watchSubscription"],"mappings":"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"}